///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, Щербаков Вадим, chtcherbakov.vadim@gmail.com
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
// Ссылка на репозитарий:
// https://github.com/shcherbakov-vadim/object_model.git

#Область Интерфейс_Внешний
Процедура глМодель_ИзменитьРеквизит(КонтекстИзменений, ИмяРеквизита, Значение) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизит(НовыйКонтекст, ИмяРеквизита, Значение);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	Данные = глМодель_Данные(КонтекстИзменений);
	Данные[ИмяРеквизита] = Значение;
	глМодель_ПриИзмененииРеквизита(КонтекстИзменений, ИмяРеквизита);
КонецПроцедуры

Процедура глМодель_ИзменитьРеквизиты(КонтекстИзменений, СтруктураЗначения) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизиты(НовыйКонтекст, СтруктураЗначения);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ИзмененныеРеквизиты = Новый Массив;
	Данные = глМодель_Данные(КонтекстИзменений);
	Для Каждого ЭлементСтруктуры Из СтруктураЗначения Цикл
 		Данные[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		ИзмененныеРеквизиты.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	глМодель_ПриИзмененииРеквизита(КонтекстИзменений, СтрСоединить(ИзмененныеРеквизиты, ","));
КонецПроцедуры

Процедура глМодель_ПриИзмененииРеквизита(КонтекстИзменений, ИменаРеквизитов, ДанныеСтрокиСтарые = Неопределено, ДанныеСтрокиНовые = Неопределено) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ПриИзмененииРеквизита(НовыйКонтекст, ИменаРеквизитов, ДанныеСтрокиСтарые, ДанныеСтрокиНовые);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	Если КонтекстИзменений.ПродолжениеВыполнения Тогда
		КонтекстИзменений.ПродолжениеВыполнения = Ложь;
	Иначе
		// регистрация обработчиков
		СтруктураОбработчиков = ПолучитьСтруктуруОбработчиков();
		Для Каждого ИмяРеквизита Из ПолучитьКлючи(ИменаРеквизитов) Цикл
			СтруктураОбработчиков.Параметры.Вставить(ИмяРеквизита, Истина);
			СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРеквизита, Истина);
		КонецЦикла;
		
		КонтекстИзменений.Обработчики = СтруктураОбработчиков;
		КонтекстИзменений.ОбработчикиСтроки = Новый Соответствие;
		КонтекстИзменений.ВыполнятьОбработчики = Ложь;
		КонтекстИзменений.ЕстьИзменения = Истина;
		Пока КонтекстИзменений.ЕстьИзменения Цикл
			КонтекстИзменений.ЕстьИзменения = Ложь;
			КонтекстИзменений.Обработчики.Идентификаторы.Очистить();
			глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиков(КонтекстИзменений, ДанныеСтрокиСтарые, ДанныеСтрокиНовые);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений)
		И КонтекстИзменений.ТребуетсяВызовСервера Тогда

		ТекущиеДействия = КонтекстИзменений.Действия;
		
		КонтекстИзменений.ПродолжениеВыполнения = Истина;
		КонтекстИзменений.Действия = Новый Структура;
		КонтекстИзменений.Действия.Вставить("глМодель_ПриИзмененииРеквизита"
			,Новый Структура("ИменаРеквизитов,ДанныеСтрокиСтарые,ДанныеСтрокиНовые,Действия"
				,ИменаРеквизитов
				,ДанныеСтрокиСтарые
				,ДанныеСтрокиНовые
				,ТекущиеДействия));
				
		глМодель_ОбработатьДействия(КонтекстИзменений);
		Возврат;
	КонецЕсли;
	
	// выполнение обработчиков
	КонтекстИзменений.ВыполнятьОбработчики = Истина;
	КонтекстИзменений.ЕстьИзменения = Истина;
	
	Пока КонтекстИзменений.ЕстьИзменения Цикл
		КонтекстИзменений.ЕстьИзменения = Ложь;
		КонтекстИзменений.Обработчики.СвойстваКОбновлению.Очистить();
		
		глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиков(КонтекстИзменений, ДанныеСтрокиСтарые, ДанныеСтрокиНовые);
		
		Если НЕ КонтекстИзменений.ЕстьИзменения Тогда
			ОбновитьСвойства(КонтекстИзменений, , КонтекстИзменений.Обработчики);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСвойства(КонтекстИзменений, , КонтекстИзменений.Обработчики, Истина);
	
	ТекстСообщения = "";
	Для Каждого ДанныеРезультата Из СтруктураОбработчиков.Результаты Цикл
		Если Найти(ДанныеРезультата.Ключ, "@") = 0 Тогда
			ТекстСообщения = ТекстСообщения + ";" + ДанныеРезультата.Ключ;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСвойства Из СтруктураОбработчиков.Свойства Цикл
		ТекстСообщения = ТекстСообщения + ";[" + ДанныеСвойства.Ключ + "]";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить(СтрШаблон(НСтр("ru = 'Обнаружен цикл в обработчиках. Не удалось обновить поля: %1'"), Сред(ТекстСообщения, 2)));
	КонецЕсли;
КонецПроцедуры
	
Процедура глМодель_ИзменитьРеквизитСтроки(КонтекстИзменений, ДанныеСтроки, ИмяРеквизита, Значение) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизитСтроки(НовыйКонтекст, ДанныеСтроки, ИмяРеквизита, Значение);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки[ИмяРеквизита] = Значение;
	глМодель_ПриИзмененииРеквизитаСтроки(КонтекстИзменений, ДанныеСтроки, ИмяРеквизита);
КонецПроцедуры

Процедура глМодель_ИзменитьРеквизитыСтроки(КонтекстИзменений, ДанныеСтроки, СтруктураЗначения) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизитыСтроки(НовыйКонтекст, ДанныеСтроки, СтруктураЗначения);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ИзмененныеРеквизиты = Новый Массив;
	Для Каждого ЭлементСтруктуры Из СтруктураЗначения Цикл
		ДанныеСтроки[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		ИзмененныеРеквизиты.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	глМодель_ПриИзмененииРеквизитаСтроки(КонтекстИзменений, ДанныеСтроки, СтрСоединить(ИзмененныеРеквизиты, ","));
КонецПроцедуры

Процедура глМодель_ПриИзмененииРеквизитаСтроки(КонтекстИзменений, ДанныеСтроки, ИменаРеквизитов) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ПриИзмененииРеквизитаСтроки(НовыйКонтекст, ДанныеСтроки, ИменаРеквизитов);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	Если КонтекстИзменений.ПродолжениеВыполнения Тогда
		КонтекстИзменений.ПродолжениеВыполнения = Ложь;
	Иначе
		// регистрация обработчиков
		СтруктураОбработчиков = ПолучитьСтруктуруОбработчиков();
		Для Каждого ИмяРеквизита Из ПолучитьКлючи(ИменаРеквизитов) Цикл
			СтруктураОбработчиков.Параметры.Вставить(ИмяРеквизита, Истина);
			СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРеквизита, Истина);
		КонецЦикла;
		
		КонтекстИзменений.Обработчики = ПолучитьСтруктуруОбработчиков();
		КонтекстИзменений.ОбработчикиСтроки = Новый Соответствие;
		КонтекстИзменений.ОбработчикиСтроки.Вставить(ДанныеСтроки, СтруктураОбработчиков);
		КонтекстИзменений.ВыполнятьОбработчики = Ложь;
		КонтекстИзменений.ЕстьИзменения = Истина;
		Пока КонтекстИзменений.ЕстьИзменения Цикл
			КонтекстИзменений.ЕстьИзменения = Ложь;
			Для Каждого ЭлементСоответствия Из КонтекстИзменений.ОбработчикиСтроки Цикл
				СтруктураОбработчиков = ЭлементСоответствия.Значение;
				СтруктураОбработчиков.Идентификаторы.Очистить();
				глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиковСтроки(КонтекстИзменений, ЭлементСоответствия.Ключ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений)
		И КонтекстИзменений.ТребуетсяВызовСервера Тогда

		ТекущиеДействия = КонтекстИзменений.Действия;
		
		КонтекстИзменений.ПродолжениеВыполнения = Истина;
		КонтекстИзменений.Действия = Новый Структура;
		КонтекстИзменений.Действия.Вставить("глМодель_ПриИзмененииРеквизитаСтроки"
			,Новый Структура("ИменаРеквизитов,ДанныеСтроки,Действия"
				,ИменаРеквизитов
				,ДанныеСтроки
				,ТекущиеДействия));
				
		глМодель_ОбработатьДействия(КонтекстИзменений);
		Возврат;
	КонецЕсли;
	
	// выполнение обработчиков
	КонтекстИзменений.ВыполнятьОбработчики = Истина;
	КонтекстИзменений.ЕстьИзменения = Истина;
	
	Пока КонтекстИзменений.ЕстьИзменения Цикл
		КонтекстИзменений.ЕстьИзменения = Ложь;
		Для Каждого ЭлементСоответствия Из КонтекстИзменений.ОбработчикиСтроки Цикл
			СтруктураОбработчиков = ЭлементСоответствия.Значение;
			СтруктураОбработчиков.СвойстваКОбновлению.Очистить();
			глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиковСтроки(КонтекстИзменений, ЭлементСоответствия.Ключ);
		КонецЦикла;
		
		Если НЕ КонтекстИзменений.ЕстьИзменения Тогда
			Для Каждого ДанныеОбработчикаСтроки Из КонтекстИзменений.ОбработчикиСтроки Цикл
				ОбновитьСвойства(КонтекстИзменений, ДанныеОбработчикаСтроки.Ключ, ДанныеОбработчикаСтроки.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДанныеОбработчикаСтроки Из КонтекстИзменений.ОбработчикиСтроки Цикл
		ОбновитьСвойства(КонтекстИзменений, ДанныеОбработчикаСтроки.Ключ, ДанныеОбработчикаСтроки.Значение, Истина);
		
		ТекстСообщения = "";
		Для Каждого ДанныеРезультата Из ДанныеОбработчикаСтроки.Значение.Результаты Цикл
			Если Найти(ДанныеРезультата.Ключ, "@") = 0 Тогда
				ТекстСообщения = ТекстСообщения + ";" + ДанныеРезультата.Ключ;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ДанныеСвойства Из ДанныеОбработчикаСтроки.Значение.Свойства Цикл
			ТекстСообщения = ТекстСообщения + ";[" + ДанныеСвойства.Ключ + "]";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщить(СтрШаблон(НСтр("ru = 'Обнаружен цикл в обработчиках. Не удалось обновить поля: %1'"), Сред(ТекстСообщения, 2)));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция глМодель_ТекущиеДанные(Элемент) Экспорт
	ТекущийЭлемент = Элемент;
	Пока ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Цикл
		ТекущийЭлемент = ТекущийЭлемент.Родитель;
	КонецЦикла;
	
	Возврат ТекущийЭлемент.ТекущиеДанные;
КонецФункции

Функция глМодель_ИмяРеквизита(Элемент) Экспорт
	ТекущийЭлемент = Элемент;
	Пока ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Цикл
		ТекущийЭлемент = ТекущийЭлемент.Родитель;
	КонецЦикла;
	
	Если СтрНачинаетсяС(Элемент.Имя, ТекущийЭлемент.Имя) Тогда
		Возврат Сред(Элемент.Имя, СтрДлина(ТекущийЭлемент.Имя) + 1);
	Иначе
		ВызватьИсключение "Не удалось вычислить имя реквизита";
	КонецЕсли;
КонецФункции

Функция глМодель_НачатьИзменения(ДокументОбъект) Экспорт
	КонтекстИзменений = ИнициализироватьКонтекстИзменений(ДокументОбъект);
	
	Возврат КонтекстИзменений;
КонецФункции

Процедура глМодель_ЗавершитьИзменения(КонтекстИзменений) Экспорт
	глМодель_ОбработатьДействия(КонтекстИзменений);
	КонтекстИзменений = Неопределено;
КонецПроцедуры

Функция глМодель_Модуль(Знач ОбъектФорма) Экспорт
	Если ТипЗнч(ОбъектФорма) = Тип("Структура") Тогда
		ОбъектФорма = ОбъектФорма.ОбъектФорма;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ИмяОбъекта = ОбъектФорма.ИмяФормы;
	Иначе
		ИмяОбъекта = ОбъектФорма.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	МассивИмяОбъекта = СтрРазделить(ИмяОбъекта, ".");
	Результат = Вычислить("Модель_" + МассивИмяОбъекта[0] + "_" + МассивИмяОбъекта[1] + "КлиентСервер");
	Возврат Результат;	
КонецФункции

Функция глМодель_Данные(Знач ОбъектФорма) Экспорт
	Если ТипЗнч(ОбъектФорма) = Тип("Структура") Тогда
		ОбъектФорма = ОбъектФорма.ОбъектФорма;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		Возврат ОбъектФорма.Объект;
	Иначе
		Возврат ОбъектФорма;
	КонецЕсли;
КонецФункции

Функция глМодель_ЕстьРеквизиты(Данные, ИменаРеквизитов) Экспорт
	МассивИменаРеквизитов = ПолучитьКлючи(ИменаРеквизитов);
	СтруктураЗначения = Новый Структура;
	МаксИнд = МассивИменаРеквизитов.Количество();
	Для Инд = 1 По МаксИнд Цикл
		ИмяРеквизита = МассивИменаРеквизитов[МаксИнд - Инд];
	
		Если Лев(ИмяРеквизита, 1) = "["
			И Прав(ИмяРеквизита, 1) = "]" Тогда
				
			МассивИменаРеквизитов.Удалить(МаксИнд - Инд);
		Иначе
			СтруктураЗначения.Вставить(ИмяРеквизита, Null);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Данные);
	
	Для Каждого ИмяРеквизита Из МассивИменаРеквизитов Цикл
		Если СтруктураЗначения[ИмяРеквизита] = Null Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция глМодель_ДанныеИзменены(ДанныеСтарые, ДанныеНовые, ИменаРеквизитов = Неопределено) Экспорт
	Если ДанныеСтарые = Неопределено
		ИЛИ ДанныеНовые = Неопределено Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ИменаРеквизитов = Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеСтарые Цикл
			Если ЭлементСтруктуры.Значение <> ДанныеНовые[ЭлементСтруктуры.Значение] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ИмяРеквизита Из ПолучитьКлючи(ИменаРеквизитов) Цикл
			Если ДанныеСтарые[ИмяРеквизита] <> ДанныеНовые[ИмяРеквизита] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура глМодель_ОбновитьСвойства(КонтекстИзменений, ИменаСвойств = Неопределено) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		глМодель_ОбновитьСвойства(ИнициализироватьКонтекстИзменений(КонтекстИзменений), ИменаСвойств);
		Возврат;
	КонецЕсли;
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений) Тогда
		ТекущиеДействия = КонтекстИзменений.Действия;
		КонтекстИзменений.Действия = Новый Структура;
		КонтекстИзменений.Действия.Вставить("глМодель_ОбновитьСвойства", ИменаСвойств);
		глМодель_ОбработатьДействия(КонтекстИзменений);
		
		КонтекстИзменений.Действия = ТекущиеДействия;
	Иначе
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		ОбъектФорма = КонтекстИзменений.ОбъектФорма;
		Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			ИмяОбъекта = ОбъектФорма.ИмяФормы;
		Иначе
			ИмяОбъекта = ОбъектФорма.Метаданные().ПолноеИмя();
		КонецЕсли;
	
		МассивИмяОбъекта = СтрРазделить(ИмяОбъекта, ".");
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МассивИмяОбъекта[0] + "." + МассивИмяОбъекта[1]);
		МенеджерОбъектов.Модель_ПриУстановкеСвойств(КонтекстИзменений, ИменаСвойств);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

Функция глМодель_ПолучитьСвойство(КонтекстИзменений, ИмяСвойства) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		Возврат глМодель_ПолучитьСвойство(ИнициализироватьКонтекстИзменений(КонтекстИзменений), ИмяСвойства);
	КонецЕсли;
	
	Если ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		СтруктураЗначения = Новый Структура(ИмяСвойства, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураЗначения, КонтекстИзменений.ОбъектФорма);
		
		Возврат СтруктураЗначения[ИмяСвойства];
	Иначе
		Результат = Неопределено;
		Если НЕ КонтекстИзменений.Свойства.Свойство(ИмяСвойства, Результат) Тогда
			глМодель_ОбновитьСвойства(КонтекстИзменений, ИмяСвойства);
			Возврат КонтекстИзменений.Свойства[ИмяСвойства];
		Иначе
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция глМодель_ПолучитьСвойствоСтроки(КонтекстИзменений, ДанныеСтроки, ИмяСвойства) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		Возврат глМодель_ПолучитьСвойствоСтроки(ИнициализироватьКонтекстИзменений(КонтекстИзменений), ДанныеСтроки, ИмяСвойства);
	КонецЕсли;
	
	Если ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		СтруктураЗначения = Новый Структура(ИмяСвойства, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураЗначения, ДанныеСтроки);
		
		Возврат СтруктураЗначения[ИмяСвойства];
	Иначе
		СвойстваСтроки = КонтекстИзменений.СвойстваСтроки[ДанныеСтроки];
		Если СвойстваСтроки = Неопределено Тогда
			глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ИмяСвойства);
			СвойстваСтроки = КонтекстИзменений.СвойстваСтроки[ДанныеСтроки];
			
		ИначеЕсли СвойстваСтроки.Свойство(ИмяСвойства) Тогда
			глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ИмяСвойства);
		КонецЕсли;
		
		Возврат СвойстваСтроки[ИмяСвойства];
	КонецЕсли;
КонецФункции

Процедура глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки = Неопределено, ИменаСвойств = Неопределено) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		глМодель_ОбновитьСвойстваСтроки(ИнициализироватьКонтекстИзменений(КонтекстИзменений), ИменаСвойств);
		Возврат;
	КонецЕсли;
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений) Тогда
		ТекущиеДействия = КонтекстИзменений.Действия;
		КонтекстИзменений.Действия = Новый Структура;
		КонтекстИзменений.Действия.Вставить("глМодель_ОбновитьСвойстваСтроки", Новый Структура("ДанныеСтроки,ИменаСвойств", ДанныеСтроки, ИменаСвойств));
		глМодель_ОбработатьДействия(КонтекстИзменений);
		КонтекстИзменений.Действия = ТекущиеДействия;
	Иначе
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		ОбъектФорма = КонтекстИзменений.ОбъектФорма;
		Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			ИмяОбъекта = ОбъектФорма.ИмяФормы;
		Иначе
			ИмяОбъекта = ОбъектФорма.Метаданные().ПолноеИмя();
		КонецЕсли;
	
		МассивИмяОбъекта = СтрРазделить(ИмяОбъекта, ".");
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МассивИмяОбъекта[0] + "." + МассивИмяОбъекта[1]);
		МенеджерОбъектов.Модель_ПриУстановкеСвойствСтроки(КонтекстИзменений, ДанныеСтроки, ИменаСвойств);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

Функция глМодель_ПроверитьВхождение(Значение, Строка) Экспорт
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Истина;
	Иначе
		МассивСтроки = ПолучитьКлючи(Строка);
		Возврат МассивСтроки.Найти(Значение) <> Неопределено;
	КонецЕсли;
КонецФункции
#КонецОбласти

#Область Интерфейс_Модель
Функция глМодель_ВыполнятьДействие(КонтекстИзменений, ИмяДействия, ИменаПараметров) Экспорт
	Возврат глМодель_ВыполнятьДействиеСтроки(КонтекстИзменений, Неопределено, ИмяДействия, ИменаПараметров);
КонецФункции

Функция глМодель_ВыполнятьДействиеСтроки(КонтекстИзменений, ДанныеСтроки, ИмяДействия, ИменаПараметров) Экспорт
	Если ДанныеСтроки = Неопределено Тогда
		СтруктураОбработчиков = КонтекстИзменений.Обработчики;
	Иначе
		СтруктураОбработчиков = КонтекстИзменений.ОбработчикиСтроки[ДанныеСтроки];
	КонецЕсли;
	
	ПараметрНайден = Ложь;
	Для Каждого ИмяПараметра Из ПолучитьКлючи(ИменаПараметров) Цикл
		Если СтруктураОбработчиков.Параметры[ИмяПараметра] <> Неопределено Тогда
			ПараметрНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрНайден Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстИзменений.ИмяТекущегоДействия = ИмяДействия;
	
	Если НЕ КонтекстИзменений.Действия.Свойство(ИмяДействия) Тогда
		КонтекстИзменений.Действия.Вставить(ИмяДействия, Новый Структура);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура глМодель_УстановитьПараметрДействия(КонтекстИзменений, ИмяПараметра, Значение) Экспорт
	ПараметрыДействия = КонтекстИзменений.Действия[КонтекстИзменений.ИмяТекущегоДействия];
	ПараметрыДействия.Вставить(ИмяПараметра, Значение);
КонецПроцедуры

Процедура глМодель_УдалитьДействие(КонтекстИзменений) Экспорт
	КонтекстИзменений.Действия.Удалить(КонтекстИзменений.ИмяТекущегоДействия);
КонецПроцедуры

Функция глМодель_ВыполнятьОбработчик(КонтекстИзменений, ИменаРезультата, ИменаПараметров, ТребуетсяВызовСервера = Ложь) Экспорт
	Возврат глМодель_ВыполнятьОбработчикСтроки(КонтекстИзменений, Неопределено, ИменаРезультата, ИменаПараметров, ТребуетсяВызовСервера);
КонецФункции

Функция глМодель_ВыполнятьОбработчикСтроки(КонтекстИзменений, ДанныеСтроки, ИменаРезультата, ИменаПараметров, ТребуетсяВызовСервера = Ложь) Экспорт
	Если ДанныеСтроки = Неопределено Тогда
		СтруктураОбработчиков = КонтекстИзменений.Обработчики;
		Данные = глМодель_Данные(КонтекстИзменений);
	Иначе
		СтруктураОбработчиков = КонтекстИзменений.ОбработчикиСтроки[ДанныеСтроки];
		Данные = ДанныеСтроки;
	КонецЕсли;
	
	ИдентификаторОбработчика = ИменаРезультата + "@" + ИменаПараметров;
	Если КонтекстИзменений.ВыполнятьОбработчики Тогда
		Если СтруктураОбработчиков.Результаты[ИдентификаторОбработчика] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого ИмяПараметра Из ПолучитьКлючи(ИменаПараметров) Цикл
			Если Лев(ИмяПараметра, 1) = "["
				И Прав(ИмяПараметра, 1) = "]" Тогда
					
				ИмяСвойства = Сред(ИмяПараметра, 2, СтрДлина(ИмяПараметра) - 2);
				Если СтруктураОбработчиков.Свойства[ИмяСвойства] <> Неопределено Тогда
					СтруктураОбработчиков.СвойстваКОбновлению.Вставить(ИмяСвойства, Истина);
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли СтруктураОбработчиков.Результаты[ИмяПараметра] <> Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		КонтекстИзменений.ЕстьИзменения = Истина;
		
		СтруктураОбработчиков.Результаты.Удалить(ИдентификаторОбработчика);
		Для Каждого ИмяРезультата Из ПолучитьКлючи(ИменаРезультата) Цикл
			СтруктураОбработчиков.Результаты.Удалить(ИмяРезультата);
		КонецЦикла;
	Иначе
		Если СтруктураОбработчиков.Идентификаторы[ИдентификаторОбработчика] <> Неопределено Тогда
			ВызватьИсключение СтрШаблон("Повторное определение обработчика с идентификатором %1", ИдентификаторОбработчика);
		Иначе
			СтруктураОбработчиков.Идентификаторы.Вставить(ИдентификаторОбработчика, Истина);
		КонецЕсли;
		
		Если СтруктураОбработчиков.Результаты[ИдентификаторОбработчика] <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивИменаРезультата = ПолучитьКлючи(ИменаРезультата);
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			Если СтруктураОбработчиков.ИзмененныеРеквизиты[ИмяРезультата] <> Неопределено Тогда
				Возврат Ложь;	
			КонецЕсли;
		КонецЦикла;
		
		МассивИменаПараметров = ПолучитьКлючи(ИменаПараметров);
		ПараметрНайден = Ложь;
		Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
			Если СтруктураОбработчиков.Параметры[ИмяПараметра] <> Неопределено Тогда
				ПараметрНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПараметрНайден Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ глМодель_ЕстьРеквизиты(Данные, ИменаРезультата + "," + ИменаПараметров) Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			ПараметрыРезультата = СтруктураОбработчиков.ЗависимостиПрямые[ИмяРезультата];
			Если ПараметрыРезультата <> Неопределено Тогда
				Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
					Если ПараметрыРезультата[ИмяПараметра] <> Неопределено Тогда
						Сообщить(СтрШаблон(НСтр("ru = 'Обнаружено повторное определение зависимости поля %1 от поля %2'"), ИмяРезультата, ИмяПараметра));
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыРезультата = СтруктураОбработчиков.ЗависимостиОбратные[ИмяРезультата];
			Если ПараметрыРезультата <> Неопределено Тогда
				Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
					Если ПараметрыРезультата[ИмяПараметра] <> Неопределено Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			ПараметрыРезультата = СтруктураОбработчиков.ЗависимостиПрямые[ИмяРезультата];
			Если ПараметрыРезультата = Неопределено Тогда
				ПараметрыРезультата = Новый Соответствие;
				СтруктураОбработчиков.ЗависимостиПрямые.Вставить(ИмяРезультата, ПараметрыРезультата);
			КонецЕсли;
			
			Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
				РезультатыПараметра = СтруктураОбработчиков.ЗависимостиОбратные[ИмяПараметра];
				Если РезультатыПараметра = Неопределено Тогда
					РезультатыПараметра = Новый Соответствие;
					СтруктураОбработчиков.ЗависимостиОбратные.Вставить(ИмяПараметра, РезультатыПараметра);
				КонецЕсли;
				
				РезультатыПараметра.Вставить(ИмяРезультата, Истина);
				ПараметрыРезультата.Вставить(ИмяПараметра, Истина);
			КонецЦикла;
			
			СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРезультата, Истина);
		КонецЦикла;
		
		КонтекстИзменений.ЕстьИзменения = Истина;
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			СтруктураОбработчиков.Параметры.Вставить(ИмяРезультата, Истина);
			СтруктураОбработчиков.Результаты.Вставить(ИмяРезультата, Истина);
		КонецЦикла;
		
		СтруктураОбработчиков.Результаты.Вставить(ИдентификаторОбработчика, Истина);
		
		Если ТребуетсяВызовСервера Тогда
			КонтекстИзменений.ТребуетсяВызовСервера = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтекстИзменений.ВыполнятьОбработчики;
КонецФункции

Процедура глМодель_ОбновлятьСвойства(КонтекстИзменений, ИменаСвойств, ИменаПараметров) Экспорт
	глМодель_ОбновлятьСвойстваСтроки(КонтекстИзменений, Неопределено, ИменаСвойств, ИменаПараметров);
КонецПроцедуры

Процедура глМодель_ОбновлятьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ИменаСвойств, ИменаПараметров) Экспорт
	Если ДанныеСтроки = Неопределено Тогда
		СтруктураОбработчиков = КонтекстИзменений.Обработчики;
		Данные = глМодель_Данные(КонтекстИзменений);
	Иначе
		СтруктураОбработчиков = КонтекстИзменений.ОбработчикиСтроки[ДанныеСтроки];
		Данные = ДанныеСтроки;
	КонецЕсли;
	
	Если НЕ КонтекстИзменений.ВыполнятьОбработчики Тогда
		Если НЕ глМодель_ЕстьРеквизиты(Данные, ИменаПараметров) Тогда
			Возврат;
		КонецЕсли;
	
		МассивИменаСвойств = ПолучитьКлючи(ИменаСвойств);
		МассивИменаПараметров = ПолучитьКлючи(ИменаПараметров);
		Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
			Если СтруктураОбработчиков.Параметры[ИмяПараметра] <> Неопределено Тогда
				Для Каждого ИмяСвойства Из МассивИменаСвойств Цикл
					Если СтруктураОбработчиков.Свойства[ИмяСвойства] = Неопределено Тогда
						СтруктураОбработчиков.Свойства.Вставить(ИмяСвойства, МассивИменаПараметров);
						СтруктураОбработчиков.Параметры.Вставить("[" + ИмяСвойства + "]", Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция глМодель_СтрокаПринадлежитКоллекции(КонтекстИзменений, ДанныеСтроки, ИмяТаблицы) Экспорт
	Возврат глМодель_Данные(КонтекстИзменений)[ИмяТаблицы].Индекс(ДанныеСтроки) >= 0;
КонецФункции

Функция глМодель_ПолучитьИмяТаблицыСтроки(КонтекстИзменений, ДанныеСтроки) Экспорт
	ИмяТаблицы = КонтекстИзменений.ПараметрыСтроки[ДанныеСтроки];
	Если ИмяТаблицы = Неопределено Тогда
		ИнициализироватьИменаТаблиц(КонтекстИзменений);
		Если НЕ КонтекстИзменений.Свойство("ИменаТаблиц") Тогда
			ИнициализироватьИменаТаблиц(КонтекстИзменений);
		КонецЕсли;
		
		Для Каждого ТекущееИмяТаблицы Из КонтекстИзменений.ИменаТаблиц Цикл
			Если глМодель_СтрокаПринадлежитКоллекции(КонтекстИзменений, ДанныеСтроки, ТекущееИмяТаблицы) Тогда
				КонтекстИзменений.ПараметрыСтроки.Вставить(ДанныеСтроки, ТекущееИмяТаблицы);
				ИмяТаблицы = ТекущееИмяТаблицы;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяТаблицы = Неопределено Тогда
		ВызватьИсключение "Строка не принадлежит объекту";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
КонецФункции

Процедура глМодель_УстановитьСвойство(КонтекстИзменений, ИмяСвойства, Значение) Экспорт
	Если ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма") Тогда 
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений")
			И глМодель_ЕстьРеквизиты(КонтекстИзменений.ОбъектФорма, ИмяСвойства) Тогда
			
			КонтекстИзменений.ОбъектФорма[ИмяСвойства].Очистить();
			Для Каждого СтрокаТаблицы Из Значение Цикл
				НоваяСтрока = КонтекстИзменений.ОбъектФорма[ИмяСвойства].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		Иначе
			СтруктураЗначения = Новый Структура(ИмяСвойства, Значение);
			ЗаполнитьЗначенияСвойств(КонтекстИзменений.ОбъектФорма, СтруктураЗначения);
		КонецЕсли;
	Иначе
		КонтекстИзменений.Свойства.Вставить(ИмяСвойства, Значение);
	КонецЕсли;
КонецПроцедуры

Процедура глМодель_УстановитьСвойствоСтроки(КонтекстИзменений, ДанныеСтроки, ИмяСвойства, Значение) Экспорт
	Если ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		СтруктураЗначения = Новый Структура(ИмяСвойства, Значение);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураЗначения);
	Иначе
		СвойстваСтроки = КонтекстИзменений.СвойстваСтроки[ДанныеСтроки];
		Если СвойстваСтроки = Неопределено Тогда
			СвойстваСтроки = Новый Структура;
			КонтекстИзменений.СвойстваСтроки.Вставить(ДанныеСтроки, СвойстваСтроки);
		КонецЕсли;
		
		СвойстваСтроки.Вставить(ИмяСвойства, Значение);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

Функция ЭтоКонтекстИзменений(КонтекстИзменений)
	Возврат ТипЗнч(КонтекстИзменений) = Тип("Структура");
КонецФункции

Функция ИнициализироватьКонтекстИзменений(ОбъектФорма)
	КонтекстИзменений = Новый Структура;
	КонтекстИзменений.Вставить("ОбъектФорма", ОбъектФорма);
	КонтекстИзменений.Вставить("Действия", Новый Структура);
	КонтекстИзменений.Вставить("ОбработанныеДействия", Новый Соответствие);
	КонтекстИзменений.Вставить("ОбрабатыватьДействия", Истина);
	КонтекстИзменений.Вставить("ПараметрыСтроки", Новый Соответствие);
	КонтекстИзменений.Вставить("Свойства", Новый Структура);
	КонтекстИзменений.Вставить("СвойстваСтроки", Новый Соответствие);
	КонтекстИзменений.Вставить("Обработчики");
	КонтекстИзменений.Вставить("ОбработчикиСтроки");
	КонтекстИзменений.Вставить("ВыполнятьОбработчики");
	КонтекстИзменений.Вставить("ЕстьИзменения");
	КонтекстИзменений.Вставить("ИмяТекущегоДействия");
	КонтекстИзменений.Вставить("ТребуетсяВызовСервера", Ложь);
	КонтекстИзменений.Вставить("ПродолжениеВыполнения", Ложь);
	
	Возврат КонтекстИзменений;
КонецФункции

Процедура ИнициализироватьИменаТаблиц(КонтекстИзменений)
	Если ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ИмяОбъекта = КонтекстИзменений.ОбъектФорма.ИмяФормы;
	Иначе
		ИмяОбъекта = КонтекстИзменений.ОбъектФорма.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	КонтекстИзменений.Вставить("ИменаТаблиц", РаботаСМоделямиВызовСервера.ПолучитьТаблицыОбъекта(ИмяОбъекта));
КонецПроцедуры

Функция глМодель_ОбработатьДействия(КонтекстИзменений, Форма = Неопределено) Экспорт
	Если НЕ КонтекстИзменений.ОбрабатыватьДействия Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		КонтекстИзменений.ОбъектФорма = Форма;
	КонецЕсли;
	
	Если КонтекстИзменений.Действия.Количество() > 0 Тогда
		Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений) Тогда
			ТекущийОбъектФорма = КонтекстИзменений.ОбъектФорма;
			ТекущиеПараметрыСтроки = КонтекстИзменений.ПараметрыСтроки;
			ТекущиеОбработчикиСтроки = КонтекстИзменений.ОбработчикиСтроки;
			
			Если НЕ КонтекстИзменений.Свойство("ИменаТаблиц") Тогда
				ИнициализироватьИменаТаблиц(КонтекстИзменений);
			КонецЕсли;
			
			ПараметрыДействия = Неопределено;
			Если КонтекстИзменений.Действия.Свойство("глМодель_ОбновитьСвойстваСтроки", ПараметрыДействия) Тогда
				Если ТипЗнч(ПараметрыДействия.ДанныеСтроки) <> Тип("Строка") Тогда
					ПараметрыДействия.ДанныеСтроки = ПолучитьКлючСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				КонецЕсли;
				
				КонтекстИзменений.ПараметрыСтроки = Новый Соответствие;
				КонтекстИзменений.ОбработчикиСтроки = Новый Соответствие;
				
			ИначеЕсли КонтекстИзменений.Действия.Свойство("глМодель_ПриИзмененииРеквизита", ПараметрыДействия) Тогда
				Если ПараметрыДействия.ДанныеСтрокиНовые <> Неопределено Тогда
					ПараметрыДействия.ДанныеСтрокиНовые = ПолучитьКлючСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтрокиНовые);
				КонецЕсли;
				
				ЗаполнитьКлючСтроки(КонтекстИзменений, КонтекстИзменений.ОбработчикиСтроки);
				ЗаполнитьКлючСтроки(КонтекстИзменений, КонтекстИзменений.ПараметрыСтроки);
				
			ИначеЕсли КонтекстИзменений.Действия.Свойство("глМодель_ПриИзмененииРеквизитаСтроки", ПараметрыДействия) Тогда
				Если ПараметрыДействия.ДанныеСтроки <> Неопределено Тогда
					ПараметрыДействия.ДанныеСтроки = ПолучитьКлючСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				КонецЕсли;
				
				ЗаполнитьКлючСтроки(КонтекстИзменений, КонтекстИзменений.ОбработчикиСтроки);
				ЗаполнитьКлючСтроки(КонтекстИзменений, КонтекстИзменений.ПараметрыСтроки);
			Иначе
				КонтекстИзменений.ПараметрыСтроки = Новый Соответствие;
				КонтекстИзменений.ОбработчикиСтроки = Новый Соответствие;
			КонецЕсли;
			
			КонтекстИзменений.ОбъектФорма = Неопределено;
			ТекущийОбъектФорма.Модель_ОбработатьДействия(КонтекстИзменений);
			
			КонтекстИзменений.ОбъектФорма = ТекущийОбъектФорма;
			КонтекстИзменений.ПараметрыСтроки = ТекущиеПараметрыСтроки;
			КонтекстИзменений.ОбработчикиСтроки = ТекущиеОбработчикиСтроки;
		Иначе
			#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			ПараметрыДействия = Неопределено;
			Если КонтекстИзменений.Действия.Свойство("глМодель_ОбновитьСвойства", ПараметрыДействия) Тогда
				глМодель_ОбновитьСвойства(КонтекстИзменений, ПараметрыДействия);
				
			ИначеЕсли КонтекстИзменений.Действия.Свойство("глМодель_ОбновитьСвойстваСтроки", ПараметрыДействия) Тогда
				Если ТипЗнч(ПараметрыДействия.ДанныеСтроки) <> Тип("Строка") Тогда
					ДанныеСтроки = ПолучитьДанныеСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				Иначе
					ДанныеСтроки = ПараметрыДействия.ДанныеСтроки;
				КонецЕсли;
				
				глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ПараметрыДействия.ИменаСвойств);
				КонтекстИзменений.Действия = Новый Структура;
				
			ИначеЕсли КонтекстИзменений.Действия.Свойство("глМодель_ПриИзмененииРеквизита", ПараметрыДействия) Тогда
				Если ПараметрыДействия.ДанныеСтрокиНовые <> Неопределено Тогда
					ДанныеСтрокиНовые = ПолучитьДанныеСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтрокиНовые);
				Иначе
					ДанныеСтрокиНовые = ПараметрыДействия.ДанныеСтрокиНовые;
				КонецЕсли;
				
				ЗаполнитьДанныеСтроки(КонтекстИзменений, КонтекстИзменений.ОбработчикиСтроки);
				ЗаполнитьДанныеСтроки(КонтекстИзменений, КонтекстИзменений.ПараметрыСтроки);
				
				КонтекстИзменений.Действия = ПараметрыДействия.Действия;
				глМодель_ПриИзмененииРеквизита(КонтекстИзменений, ПараметрыДействия.ИменаРеквизитов, ПараметрыДействия.ДанныеСтрокиСтарые, ДанныеСтрокиНовые);
				глМодель_ОбработатьДействия(КонтекстИзменений);
			
			ИначеЕсли КонтекстИзменений.Действия.Свойство("глМодель_ПриИзмененииРеквизитаСтроки", ПараметрыДействия) Тогда
				Если ПараметрыДействия.ДанныеСтроки <> Неопределено Тогда
					ДанныеСтроки = ПолучитьДанныеСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				Иначе
					ДанныеСтроки = Неопределено;
				КонецЕсли;
				
				ЗаполнитьДанныеСтроки(КонтекстИзменений, КонтекстИзменений.ОбработчикиСтроки);
				ЗаполнитьДанныеСтроки(КонтекстИзменений, КонтекстИзменений.ПараметрыСтроки);
				
				КонтекстИзменений.Действия = ПараметрыДействия.Действия;
				глМодель_ПриИзмененииРеквизитаСтроки(КонтекстИзменений, ДанныеСтроки, ПараметрыДействия.ИменаРеквизитов);
				глМодель_ОбработатьДействия(КонтекстИзменений);
				
			Иначе
				Если ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
					ИмяОбъекта = КонтекстИзменений.ОбъектФорма.ИмяФормы;
				Иначе
					ИмяОбъекта = КонтекстИзменений.ОбъектФорма.Метаданные().ПолноеИмя();
				КонецЕсли;
	
				МассивИмяОбъекта = СтрРазделить(ИмяОбъекта, ".");
				МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МассивИмяОбъекта[0] + "." + МассивИмяОбъекта[1]);
				
				ДействияКОбработке = Новый Структура;
				Для Каждого СтруктураДействия Из КонтекстИзменений.Действия Цикл
					ИдентификаторДействия = СтруктураДействия.Ключ + ЗначениеВСтрокуВнутр(СтруктураДействия.Значение);
					
					Если КонтекстИзменений.ОбработанныеДействия[ИдентификаторДействия] = Неопределено Тогда
						ДействияКОбработке.Вставить(СтруктураДействия.Ключ, СтруктураДействия.Значение);
						КонтекстИзменений.ОбработанныеДействия.Вставить(ИдентификаторДействия, Истина);
					КонецЕсли;
				КонецЦикла;
				
				КонтекстИзменений.Действия = Новый Структура;
				КонтекстИзменений.ОбрабатыватьДействия = Ложь;
				Для Каждого СтруктураДействия Из ДействияКОбработке Цикл
					Выполнить("МенеджерОбъектов." + СтруктураДействия.Ключ + "(КонтекстИзменений, СтруктураДействия.Значение)");
				КонецЦикла;
				КонтекстИзменений.ОбрабатыватьДействия = Истина;
				
				глМодель_ОбработатьДействия(КонтекстИзменений);
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		КонтекстИзменений.ОбъектФорма = Неопределено;
		КонтекстИзменений.ПараметрыСтроки = Неопределено;
		КонтекстИзменений.ОбработчикиСтроки = Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОбновитьСвойства(КонтекстИзменений, ДанныеСтроки, СтруктураОбработчиков, ОкончательныйРасчет = Ложь)
	Если НЕ ОкончательныйРасчет
		И СтруктураОбработчиков.СвойстваКОбновлению.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	МассивСвойстваКОбновлению = Новый Массив;
	Для Каждого ДанныеСвойства Из СтруктураОбработчиков.Свойства Цикл
		Если НЕ ОкончательныйРасчет
			И СтруктураОбработчиков.СвойстваКОбновлению[ДанныеСвойства.Ключ] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыСвойстваРассчитаны = Истина;
		Для Каждого ИмяПараметра Из ДанныеСвойства.Значение Цикл
			Если Лев(ИмяПараметра, 1) = "["
				И Прав(ИмяПараметра, 1) = "]" Тогда
			
				ИмяСвойства = Сред(ИмяПараметра, СтрДлина(ИмяПараметра) - 2);
				Если СтруктураОбработчиков.Свойства[ИмяСвойства] <> Неопределено Тогда
					ПараметрыСвойстваРассчитаны = Ложь;
					Прервать;
				КонецЕсли;
			
			ИначеЕсли СтруктураОбработчиков.Результаты[ИмяПараметра] <> Неопределено Тогда
				ПараметрыСвойстваРассчитаны = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыСвойстваРассчитаны Тогда
			МассивСвойстваКОбновлению.Добавить(ДанныеСвойства.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяСвойства Из МассивСвойстваКОбновлению Цикл
		СтруктураОбработчиков.Свойства.Удалить(ИмяСвойства);
	КонецЦикла;
	
	Если МассивСвойстваКОбновлению.Количество() > 0 Тогда
		Если ДанныеСтроки = Неопределено Тогда
			глМодель_ОбновитьСвойства(КонтекстИзменений, СтрСоединить(МассивСвойстваКОбновлению, ","));
		Иначе
			глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, СтрСоединить(МассивСвойстваКОбновлению, ","));
		КонецЕсли;
		
		КонтекстИзменений.ЕстьИзменения = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСтруктуруОбработчиков()
	Возврат Новый Структура("Результаты,Параметры,ЗависимостиПрямые,ЗависимостиОбратные,Свойства,СвойстваКОбновлению,Идентификаторы,ИзмененныеРеквизиты"
			,Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие);
КонецФункции
		
Функция ПолучитьКлючи(Коллекция)
	Если ТипЗнч(Коллекция) = Тип("Массив")
		ИЛИ ТипЗнч(Коллекция) = Тип("ФиксированныйМассив") Тогда
		
		Возврат Коллекция;
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Строка") Тогда
		Возврат СтрРазделить(Коллекция, ",");
		
	Иначе
		МассивРезультат = Новый Массив;
		Для Каждого КлючИЗначение Из Коллекция Цикл
			МассивРезультат.Добавить(КлючИЗначение.Ключ);	
		КонецЦикла;
		
		Возврат МассивРезультат;
	КонецЕсли;
КонецФункции

Функция ПолучитьКлючСтроки(КонтекстИзменений, ДанныеСтроки)
	Возврат Новый Структура("ИмяТаблицы,ИдентификаторСтроки"
		,глМодель_ПолучитьИмяТаблицыСтроки(КонтекстИзменений, ДанныеСтроки)
		,ДанныеСтроки.ПолучитьИдентификатор());
КонецФункции

Функция ПолучитьДанныеСтроки(КонтекстИзменений, Ключ)
	Объект = глМодель_Данные(КонтекстИзменений);
	Возврат Объект[Ключ.ИмяТаблицы].НайтиПоИдентификатору(Ключ.ИдентификаторСтроки);
КонецФункции

Процедура ЗаполнитьКлючСтроки(КонтекстИзменений, Соответствие)
	НовоеСоответствие = Новый Соответствие;
	Для Каждого ЭлементСоответствия Из Соответствие Цикл
		КлючСтроки = ПолучитьКлючСтроки(КонтекстИзменений, ЭлементСоответствия.Ключ);
		НовоеСоответствие.Вставить(КлючСтроки, ЭлементСоответствия.Значение);
	КонецЦикла;
	Соответствие = НовоеСоответствие;
КонецПроцедуры

Процедура ЗаполнитьДанныеСтроки(КонтекстИзменений, Соответствие)
	НовоеСоответствие = Новый Соответствие;
	Для Каждого ЭлементСоответствия Из Соответствие Цикл
		КлючСтроки = ПолучитьДанныеСтроки(КонтекстИзменений, ЭлементСоответствия.Ключ);
		НовоеСоответствие.Вставить(КлючСтроки, ЭлементСоответствия.Значение);
	КонецЦикла;
	Соответствие = НовоеСоответствие;
КонецПроцедуры

Функция ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений)
	Результат = (ТипЗнч(КонтекстИзменений.ОбъектФорма) = Тип("УправляемаяФорма"));
	#Если Сервер Тогда
	Результат = Ложь;
	#КонецЕсли
	
	Возврат Результат;
КонецФункции