///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, Щербаков Вадим, chtcherbakov.vadim@gmail.com
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
// Ссылка на репозитарий:
// https://github.com/shcherbakov-vadim/object_model.git

#Область Интерфейс_Внешний

// Изменение реквизита модели объекта
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
// 	ИмяРеквизита - Строка - 
// 	Значение
Процедура глМодель_ИзменитьРеквизит(КонтекстИзменений, ИмяРеквизита, Значение) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизит(НовыйКонтекст, ИмяРеквизита, Значение);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	Данные = глМодель_Данные(КонтекстИзменений);
	Данные[ИмяРеквизита] = Значение;
	глМодель_ПриИзмененииРеквизитов(КонтекстИзменений, ИмяРеквизита);
КонецПроцедуры

// Изменение нескольких реквизитов объекта
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  СтруктураЗначения	 - Структура - изменяемые реквизиты
//					* Ключ - имя реквизита
//					* Значение - 
//
Процедура глМодель_ИзменитьРеквизиты(КонтекстИзменений, СтруктураЗначения) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизиты(НовыйКонтекст, СтруктураЗначения);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ИзмененныеРеквизиты = Новый Массив;
	Данные = глМодель_Данные(КонтекстИзменений);
	Для Каждого ЭлементСтруктуры Из СтруктураЗначения Цикл
 		Данные[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		ИзмененныеРеквизиты.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	глМодель_ПриИзмененииРеквизитов(КонтекстИзменений, СтрСоединить(ИзмененныеРеквизиты, ","));
КонецПроцедуры

// Отражение изменения реквизитов постфактум
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ИменаРеквизитов	- Строка - имена измененных реквизитов через запятую
//					- Массив,ФиксированныйМассив - имена измененных реквизитов
//					- Соответствие,Структура - коллекция, в ключах которой указаны имена измененных реквизитов
//  ДанныеСтрокиСтарые	 - Структура - значения реквизитов строки табличной части до редактирования
//  					 - Массив - измененные строки. в этом случае параметр ДанныеСтрокиНовые не указывается
//  ДанныеСтрокиНовые	 - СтрокаКоллеции - новые данные строки
//
Процедура глМодель_ПриИзмененииРеквизитов(КонтекстИзменений, ИменаРеквизитов, ДанныеСтрокиСтарые = Неопределено, ДанныеСтрокиНовые = Неопределено) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ПриИзмененииРеквизитов(НовыйКонтекст, ИменаРеквизитов, ДанныеСтрокиСтарые, ДанныеСтрокиНовые);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;

	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	СостояниеКонтекста = СохранитьСостояниеКонтекста(ДанныеКонтекста);
	
	Если ДанныеКонтекста.ПродолжениеВыполнения Тогда
		ДанныеКонтекста.ПродолжениеВыполнения = Ложь;
	Иначе
		// регистрация обработчиков
		СтруктураОбработчиков = ПолучитьСтруктуруОбработчиков();
		Для Каждого ИмяРеквизита Из глМодель_ПолучитьКлючи(ИменаРеквизитов) Цикл
			СтруктураОбработчиков.Параметры.Вставить(ИмяРеквизита, Истина);
			
			Если ДанныеСтрокиСтарые = Неопределено
				И ДанныеСтрокиНовые = Неопределено Тогда

				СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРеквизита, Истина);
			Иначе
				СоответствиеСтроки = СтруктураОбработчиков.ИзмененныеРеквизиты[ИмяРеквизита];
				Если СоответствиеСтроки = Неопределено Тогда
					СоответствиеСтроки = Новый Соответствие;
					СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРеквизита, СоответствиеСтроки);
				КонецЕсли;
				
				Если ТипЗнч(ДанныеСтрокиСтарые) = Тип("Массив") Тогда
					Для Каждого ДанныеСтроки Из ДанныеСтрокиСтарые Цикл
						СоответствиеСтроки.Вставить(ДанныеСтроки, Истина);
					КонецЦикла;
				Иначе
					Если ДанныеСтрокиСтарые <> Неопределено Тогда
						СоответствиеСтроки.Вставить(ДанныеСтрокиСтарые, Истина);
					КонецЕсли;
					Если ДанныеСтрокиНовые <> Неопределено Тогда
						СоответствиеСтроки.Вставить(ДанныеСтрокиНовые, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеКонтекста.Обработчики <> Неопределено
			И ДанныеКонтекста.Обработчики.Параметры.Количество() > 0
			И ДанныеКонтекста.УровеньВложенности > 1 Тогда
			
			Сообщить(НСтр("ru='Обнаружена попытка повторного вызова обработчиков шапки'"));
			ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста);
			Возврат;
		КонецЕсли;
		
		ДанныеКонтекста.Обработчики = СтруктураОбработчиков;
		ДанныеКонтекста.НомерЭтапа = 1;
		ДанныеКонтекста.ЕстьИзменения = Истина;
		
		Пока ДанныеКонтекста.ЕстьИзменения Цикл
			ДанныеКонтекста.ЕстьИзменения = Ложь;
			ДанныеКонтекста.Обработчики.Идентификаторы.Очистить();
			глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиков(КонтекстИзменений);
			ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений)
		И ДанныеКонтекста.ТребуетсяВызовСервера Тогда

		ТекущиеДействия = ДанныеКонтекста.Действия;
		
		ДанныеКонтекста.ПродолжениеВыполнения = Истина;
		ДанныеКонтекста.Действия = Новый Структура;
		ДанныеКонтекста.Действия.Вставить("глМодель_ПриИзмененииРеквизита"
			,Новый Структура("ИменаРеквизитов,Действия"
				,ИменаРеквизитов
				,ТекущиеДействия));
				
		ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста, "ПередВызовомСервера");
		глМодель_ОбработатьДействия(КонтекстИзменений);
		
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста, "ПослеВызоваСервера");
		Возврат;
	КонецЕсли;
	
	// выполнение обработчиков
	ДанныеКонтекста.НомерЭтапа = 2;
	ДанныеКонтекста.ЕстьИзменения = Истина;
	
	Пока ДанныеКонтекста.ЕстьИзменения Цикл
		ДанныеКонтекста.ЕстьИзменения = Ложь;
		ДанныеКонтекста.Обработчики.СвойстваКОбновлению.Очистить();
		
		глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиков(КонтекстИзменений);
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		
		Если НЕ ДанныеКонтекста.ЕстьИзменения Тогда
			ОбновитьСвойства(КонтекстИзменений, , ДанныеКонтекста.Обработчики);
			ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСвойства(КонтекстИзменений, , ДанныеКонтекста.Обработчики, Истина);
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	ТекстСообщения = "";
	Для Каждого ДанныеРезультата Из ДанныеКонтекста.Обработчики.Результаты Цикл
		Если Найти(ДанныеРезультата.Ключ, "@") = 0 Тогда
			ТекстСообщения = ТекстСообщения + ";" + ДанныеРезультата.Ключ;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСвойства Из ДанныеКонтекста.Обработчики.Свойства Цикл
		ТекстСообщения = ТекстСообщения + ";[" + ДанныеСвойства.Ключ + "]";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить(СтрШаблон(НСтр("ru = 'Обнаружен цикл в обработчиках. Не удалось обновить поля: %1'"), Сред(ТекстСообщения, 2)));
	КонецЕсли;
	
	// регистрация действий
	ДанныеКонтекста.НомерЭтапа = 3;
	глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиков(КонтекстИзменений);

	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста);
КонецПроцедуры
	
// Изменение реквизита строки таблицы модели объекта
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//	ДанныеСтроки - СтрокаКоллекции - изменяемая строка
// 	ИмяРеквизита - Строка - 
// 	Значение
Процедура глМодель_ИзменитьРеквизитСтроки(КонтекстИзменений, ДанныеСтроки, ИмяРеквизита, Значение) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизитСтроки(НовыйКонтекст, ДанныеСтроки, ИмяРеквизита, Значение);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки[ИмяРеквизита] = Значение;
	глМодель_ПриИзмененииРеквизитовСтроки(КонтекстИзменений, ДанныеСтроки, ИмяРеквизита);
КонецПроцедуры

// Изменение нескольких реквизитов модели объекта
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ДанныеСтроки		 - СтрокаКоллекции - изменяемая стркоа
//  СтруктураЗначения	 - Структура - изменяемые реквизиты
//					* Ключ - имя реквизита
//					* Значение - 
//
Процедура глМодель_ИзменитьРеквизитыСтроки(КонтекстИзменений, ДанныеСтроки, СтруктураЗначения) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ИзменитьРеквизитыСтроки(НовыйКонтекст, ДанныеСтроки, СтруктураЗначения);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ИзмененныеРеквизиты = Новый Массив;
	Для Каждого ЭлементСтруктуры Из СтруктураЗначения Цикл
		ДанныеСтроки[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		ИзмененныеРеквизиты.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	глМодель_ПриИзмененииРеквизитовСтроки(КонтекстИзменений, ДанныеСтроки, СтрСоединить(ИзмененныеРеквизиты, ","));
КонецПроцедуры

// Отражение изменения реквизитов строки постфактум
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ИменаРеквизитов	- Строка - имена измененных реквизитов через запятую
//					- Массив,ФиксированныйМассив - имена измененных реквизитов
//					- Соответствие,Структура - коллекция, в ключах которой указаны имена измененных реквизитов
//  ДанныеСтроки	- СтрокаКоллекции - измененная строка
//  ИменаРеквизитов	- Строка - имена измененных реквизитов через запятую
//					- Массив,ФиксированныйМассив - имена измененных реквизитов
//					- Соответствие,Структура - коллекция, в ключах которой указаны имена измененных реквизитов
//
Процедура глМодель_ПриИзмененииРеквизитовСтроки(КонтекстИзменений, ДанныеСтроки, ИменаРеквизитов) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		НовыйКонтекст = ИнициализироватьКонтекстИзменений(КонтекстИзменений);
		глМодель_ПриИзмененииРеквизитовСтроки(НовыйКонтекст, ДанныеСтроки, ИменаРеквизитов);
		глМодель_ОбработатьДействия(НовыйКонтекст);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	СостояниеКонтекста = СохранитьСостояниеКонтекста(ДанныеКонтекста);
	
	Если ДанныеКонтекста.ПродолжениеВыполнения Тогда
		ДанныеКонтекста.ПродолжениеВыполнения = Ложь;
	Иначе
		// регистрация обработчиков
		Если ДанныеКонтекста.ОбработчикиСтроки[ДанныеСтроки] <> Неопределено
			И ДанныеКонтекста.УровеньВложенности > 1 Тогда
				
			Сообщить(СтрШаблон(НСтр("ru='Попытка повторного вызова обработчиков строки таблицы %1'")
				,глМодель_ПолучитьИмяРодителяСтроки(КонтекстИзменений, ДанныеСтроки)));
			
			ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста);
			Возврат;
		КонецЕсли;
		
		СтруктураОбработчиков = ПолучитьСтруктуруОбработчиков();
		Для Каждого ИмяРеквизита Из глМодель_ПолучитьКлючи(ИменаРеквизитов) Цикл
			СтруктураОбработчиков.Параметры.Вставить(ИмяРеквизита, Истина);
			СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРеквизита, Истина);
		КонецЦикла;
		
		Если ДанныеКонтекста.Обработчики = Неопределено Тогда
			ДанныеКонтекста.Обработчики = ПолучитьСтруктуруОбработчиков();
		КонецЕсли;
		
		ДанныеКонтекста.ОбработчикиСтроки.Вставить(ДанныеСтроки, СтруктураОбработчиков);
		ДанныеКонтекста.НомерЭтапа = 1;
		ДанныеКонтекста.ЕстьИзменения = Истина;
		Пока ДанныеКонтекста.ЕстьИзменения Цикл
			ДанныеКонтекста.ЕстьИзменения = Ложь;
			СтруктураОбработчиков.Идентификаторы.Очистить();
			глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиковСтроки(КонтекстИзменений, ДанныеСтроки);
			ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений)
		И ДанныеКонтекста.ТребуетсяВызовСервера Тогда

		ТекущиеДействия = ДанныеКонтекста.Действия;
		
		ДанныеКонтекста.ПродолжениеВыполнения = Истина;
		ДанныеКонтекста.Действия = Новый Структура;
		ДанныеКонтекста.Действия.Вставить("глМодель_ПриИзмененииРеквизитаСтроки"
			,Новый Структура("ИменаРеквизитов,ДанныеСтроки,Действия"
				,ИменаРеквизитов
				,ДанныеСтроки
				,ТекущиеДействия));
				
		ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста, "ПередВызовомСервера");
		глМодель_ОбработатьДействия(КонтекстИзменений);
		
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста, "ПослеВызоваСервера");
		Возврат;
	КонецЕсли;
	
	// выполнение обработчиков
	ДанныеКонтекста.НомерЭтапа = 2;
	ДанныеКонтекста.ЕстьИзменения = Истина;
	
	СтруктураОбработчиков = ДанныеКонтекста.ОбработчикиСтроки[ДанныеСтроки];
	Пока ДанныеКонтекста.ЕстьИзменения Цикл
		ДанныеКонтекста.ЕстьИзменения = Ложь;
		СтруктураОбработчиков.СвойстваКОбновлению.Очистить();
		глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиковСтроки(КонтекстИзменений, ДанныеСтроки);
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		
		Если НЕ ДанныеКонтекста.ЕстьИзменения Тогда
			ОбновитьСвойства(КонтекстИзменений, ДанныеСтроки, СтруктураОбработчиков);
			ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		КонецЕсли;
		
		Если ДанныеКонтекста.ИзмененныеТаблицы <> Неопределено Тогда
			ИмяТаблицы = глМодель_ПолучитьИмяРодителяСтроки(КонтекстИзменений, ДанныеСтроки);
			
			СоответствиеСтроки = ДанныеКонтекста.ИзмененныеТаблицы[ИмяТаблицы];
			Если СоответствиеСтроки = Неопределено Тогда
				СоответствиеСтроки = Новый Соответствие;
				ДанныеКонтекста.ИзмененныеТаблицы.Вставить(ИмяТаблицы, СоответствиеСтроки);
			КонецЕсли;
			
			СоответствиеСтроки.Вставить(ДанныеСтроки, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСвойства(КонтекстИзменений, ДанныеСтроки, СтруктураОбработчиков, Истина);
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	ТекстСообщения = "";
	Для Каждого ДанныеРезультата Из СтруктураОбработчиков.Результаты Цикл
		Если Найти(ДанныеРезультата.Ключ, "@") = 0 Тогда
			ТекстСообщения = ТекстСообщения + ";" + ДанныеРезультата.Ключ;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСвойства Из СтруктураОбработчиков.Свойства Цикл
		ТекстСообщения = ТекстСообщения + ";[" + ДанныеСвойства.Ключ + "]";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить(СтрШаблон(НСтр("ru = 'Обнаружен цикл в обработчиках. Не удалось обновить поля: %1'"), Сред(ТекстСообщения, 2)));
	КонецЕсли;

	// регистрация действий
	ДанныеКонтекста.НомерЭтапа = 3;
	глМодель_Модуль(КонтекстИзменений).ПриВыполненииОбработчиковСтроки(КонтекстИзменений, ДанныеСтроки);

	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста);
КонецПроцедуры

// Получение строки коллекции по элементу формы, подчиненному таблице формы
//
// Параметры:
//  Элемент	 - ПолеФормы	- 
// 
// Возвращаемое значение:
//  СтрокаКоллекции - 
//
Функция глМодель_ТекущиеДанные(Элемент) Экспорт
	ТекущийЭлемент = Элемент;
	Пока ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Цикл
		ТекущийЭлемент = ТекущийЭлемент.Родитель;
	КонецЦикла;
	
	Возврат ТекущийЭлемент.ТекущиеДанные;
КонецФункции

// Получение имени реквизита элемента формы, подчиненному таблице формы, имя которого начинается с имени таблицы
//
// Параметры:
//  Элемент	 - ПолеФормы - 
// 
// Возвращаемое значение:
//  Строка - 
//
Функция глМодель_ИмяРеквизита(Элемент) Экспорт
	ТекущийЭлемент = Элемент;
	Пока ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Цикл
		ТекущийЭлемент = ТекущийЭлемент.Родитель;
	КонецЦикла;
	
	Если СтрНачинаетсяС(Элемент.Имя, ТекущийЭлемент.Имя) Тогда
		Возврат Сред(Элемент.Имя, СтрДлина(ТекущийЭлемент.Имя) + 1);
	Иначе
		ВызватьИсключение "Не удалось вычислить имя реквизита";
	КонецЕсли;
КонецФункции

// Начинает пакетное изменение реквизитов модели объекта
//
// Параметры:
//  ФрпмаОбъект	 - ЛюбойОбъект - 
//			- УправляемаяФорма		
//	ОбрабатыватьИзмененныеТаблицыПриЗавершении - Булево - нужно ли регистрировать измененные таблицы и обрабатывать из изменения при завершении
// 
// Возвращаемое значение:
//  Структура - контекст изменений
//
Функция глМодель_НачатьИзменения(Знач ФормаОбъект, ОбрабатыватьИзмененныеТаблицыПриЗавершении = Истина) Экспорт
	Если ЭтоОбъектСсылочногоТипа(ФормаОбъект)
		И ФормаОбъект.ДополнительныеСвойства.Свойство("Модель_КонтекстИзменений") Тогда
		
		Если ФормаОбъект.ДополнительныеСвойства.Свойство("Модель_КонтекстИзмененийБылПодготовлен") Тогда
			Возврат ФормаОбъект.ДополнительныеСвойства.Модель_КонтекстИзменений;
		Иначе
			ВызватьИсключение "Попытка вложенного начала изменений";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСсылка(ФормаОбъект) Тогда
		ФормаОбъект = ФормаОбъект.ПолучитьОбъект();
	КонецЕсли;
	
	КонтекстИзменений = ИнициализироватьКонтекстИзменений(ФормаОбъект);
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Если ОбрабатыватьИзмененныеТаблицыПриЗавершении Тогда
		ДанныеКонтекста.ИзмененныеТаблицы = Новый Соответствие;
		ДанныеКонтекста.ОтложенноеИзменениеТаблиц = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ФормаОбъект) <> Тип("УправляемаяФорма") Тогда
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ДанныеКонтекста.ПараметрыМодели.Опции.Свойство("Реквизиты") Тогда
			МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ФормаОбъект.Метаданные().ПолноеИмя());
			МенеджерОбъектов.Модель_ПриИнициализации(КонтекстИзменений);
	
			СоздатьРеквизиты(КонтекстИзменений);
			
			Объект = глМодель_Данные(КонтекстИзменений);
			Если ЗначениеЗаполнено(Объект.Ссылка)
				И (ДанныеКонтекста.ПараметрыМодели.ЕстьРеквизитыВместе
					ИЛИ ДанныеКонтекста.ПараметрыМодели.ЕстьРеквизитыОтдельно) Тогда
				
				МенеджерОбъектов.Модель_ПриЧтении(КонтекстИзменений, Объект, Ложь);
			КонецЕсли;
		КонецЕсли;

		Если ДанныеКонтекста.ПараметрыМодели.Опции.Свойство("Свойства") Тогда
			глМодель_ОбновитьСвойства(КонтекстИзменений);
		КонецЕсли;
	
		Если ДанныеКонтекста.ПараметрыМодели.Опции.Свойство("СвойстваСтроки") Тогда
			глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений);
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;

	Возврат КонтекстИзменений;
КонецФункции

// Получение контекста для чтения дополнительный реквизитов и свойств
//
// Параметры:
//  Объект,Ссылка - ЛюбойОбъект,ЛюбаяСсылка - 
// 
// Возвращаемое значение:
//  Структура - контекст изменений
//
Функция глМодель_ПодготовитьДляЧтения(Знач Объект) Экспорт
	Результат = глМодель_НачатьИзменения(Объект);
	Результат.ДополнительныеСвойства.Вставить("Модель_КонтекстИзмененийБылПодготовлен", Истина);
	
	Возврат Результат;	
КонецФункции

// Завершает пакетное изменение реквизитов модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура, ЛюбойОбъект - контекст изменений
//
Процедура глМодель_ЗавершитьИзменения(КонтекстИзменений) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Если ДанныеКонтекста.ИзмененныеТаблицы <> Неопределено Тогда
		ДанныеКонтекста.ОтложенноеИзменениеТаблиц = Ложь;
		Для Каждого ЭлементСоответствия Из ДанныеКонтекста.ИзмененныеТаблицы Цикл
			глМодель_ПриИзмененииРеквизитов(КонтекстИзменений, ЭлементСоответствия.Ключ, глМодель_ПолучитьКлючи(ЭлементСоответствия.Значение));
		КонецЦикла;
	КонецЕсли;
	
	глМодель_ОбработатьДействия(КонтекстИзменений);

	Если ЭтоОбъектСсылочногоТипа(КонтекстИзменений) Тогда
		Объект = КонтекстИзменений;
		Если ДанныеКонтекста.ПараметрыМодели.ЕстьРеквизитыОтдельно Тогда
			ВызватьИсключение "Модель содержит реквизиты, хранимые отдельно. Завершение изменений возможно только вместе с записью";
		КонецЕсли;
		
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ДанныеКонтекста.ПараметрыМодели.ЕстьРеквизитыВместе Тогда
			МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
			МенеджерОбъектов.Модель_ПередЗаписью(КонтекстИзменений, Объект);
		КонецЕсли;
		#КонецЕсли
		
		КонтекстИзменений.ДополнительныеСвойства.Удалить("Модель_КонтекстИзменений");
	Иначе
		КонтекстИзменений = Неопределено;
	КонецЕсли;
КонецПроцедуры

// Получает ссылку на модуль модели объекта
//
// Параметры:
//  ОбъектФорма	 - Структура - контекст изменений
//				- УправляемаяФорма
//				- ЛюбойОбъект,ЛюбаяСсылка
// 
// Возвращаемое значение:
//  ОбщийМодуль - 
//
Функция глМодель_Модуль(Знач ОбъектФорма) Экспорт
	Если ТипЗнч(ОбъектФорма) = Тип("Структура") Тогда
		ОбъектФорма = ОбъектФорма.ОбъектФорма;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ИмяОбъекта = ОбъектФорма.ИмяФормы;
	Иначе
		ИмяОбъекта = ОбъектФорма.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	МассивИмяОбъекта = СтрРазделить(ИмяОбъекта, ".");
	Результат = Вычислить("Модель_" + МассивИмяОбъекта[0] + "_" + МассивИмяОбъекта[1] + "КлиентСервер");
	Возврат Результат;	
КонецФункции

// Получает данные объекта или его реквизита
//
// Параметры:
//  ОбъектФорма	 - Структура - контекст изменений
//				- УправляемаяФорма
//				- ЛюбойОбъект
//	ИмяРеквизита - Строка - реквизит. если не указан, возвращаются данные объекта
// 
// Возвращаемое значение:
//  ДанныеФормыСтруктура, ЛюбойОбъект - 
//
Функция глМодель_Данные(Знач ОбъектФорма, ИмяРеквизита = Неопределено) Экспорт
	Если ТипЗнч(ОбъектФорма) = Тип("Структура") Тогда
		ОбъектФорма = ОбъектФорма.ОбъектФорма;
	КонецЕсли;
	
	Если ИмяРеквизита <> Неопределено Тогда
		Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			Результат = ОбъектФорма[ИмяРеквизита];
		Иначе
			Результат = ПолучитьЗначениеРеквизита(ДанныеКонтекста(ОбъектФорма).Реквизиты, ИмяРеквизита);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			Результат = ОбъектФорма.Объект;
		Иначе
			Результат = ОбъектФорма;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Результат) = Тип("ДанныеФормыДерево")
		ИЛИ ТипЗнч(Результат) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		Результат = Результат.ПолучитьЭлементы();
	КонецЕсли;
	#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	Если ТипЗнч(Результат) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(Результат) = Тип("СтрокаДереваЗначений") Тогда
		
		Результат = Результат.Строки;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
КонецФункции

// Проверяет существование реквизитов в данных
//
// Параметры:
//  Данные			 - ЛюбойОбъект,СтрокаКоллекции - 
//  ИменаРеквизитов	- Строка - имена измененных реквизитов через запятую
//					- Массив,ФиксированныйМассив - имена измененных реквизитов
//					- Соответствие,Структура - коллекция, в ключах которой указаны имена измененных реквизитов
// 
// Возвращаемое значение:
//  Булево - Истина, если все реквизиты существуют, Ложь - в остальных случаях. Свойства при этом игнорируются
//
Функция глМодель_ЕстьРеквизиты(Данные, ИменаРеквизитов) Экспорт
	МассивИменаРеквизитов = глМодель_ПолучитьКлючи(ИменаРеквизитов);
	СтруктураЗначения = Новый Структура;
	МаксИнд = МассивИменаРеквизитов.Количество();
	Для Инд = 1 По МаксИнд Цикл
		ИмяРеквизита = МассивИменаРеквизитов[МаксИнд - Инд];
	
		Если Лев(ИмяРеквизита, 1) = "["
			И Прав(ИмяРеквизита, 1) = "]" Тогда
				
			МассивИменаРеквизитов.Удалить(МаксИнд - Инд);
		Иначе
			СтруктураЗначения.Вставить(ИмяРеквизита, Null);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Данные);
	
	Для Каждого ИмяРеквизита Из МассивИменаРеквизитов Цикл
		Если СтруктураЗначения[ИмяРеквизита] = Null Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Проверяет, если изменения между старыми и новыми данными
//
// Параметры:
//  ДанныеСтарые	 - Структура - 
//  ДанныеНовые		 - ЛюбойОбъект,СтрокаКоллекции	 - 
//  ИменаРеквизитов	- Строка - имена измененных реквизитов через запятую
//					- Массив,ФиксированныйМассив - имена измененных реквизитов
//					- Соответствие,Структура - коллекция, в ключах которой указаны имена измененных реквизитов
// 
// Возвращаемое значение:
//  Булево - Истина, если есть измеения, Ложь - в остальных случаях
//
Функция глМодель_ДанныеИзменены(ДанныеСтарые, ДанныеНовые, ИменаРеквизитов = Неопределено) Экспорт
	Если ДанныеСтарые = Неопределено
		ИЛИ ДанныеНовые = Неопределено Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ИменаРеквизитов = Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеСтарые Цикл
			Если ЭлементСтруктуры.Значение <> ДанныеНовые[ЭлементСтруктуры.Значение] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ИмяРеквизита Из глМодель_ПолучитьКлючи(ИменаРеквизитов) Цикл
			Если ДанныеСтарые[ИмяРеквизита] <> ДанныеНовые[ИмяРеквизита] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Инициирует обновление свойств модели объекта
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ИменаСвойств - Строка - имена обновляемых свойств через запятую, если не указано, обновляются все свойства
//
Процедура глМодель_ОбновитьСвойства(КонтекстИзменений, ИменаСвойств = Неопределено) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		глМодель_ОбновитьСвойства(ИнициализироватьКонтекстИзменений(КонтекстИзменений), ИменаСвойств);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений) Тогда
		ТекущиеДействия = ДанныеКонтекста.Действия;
		ДанныеКонтекста.Действия = Новый Структура;
		ДанныеКонтекста.Действия.Вставить("глМодель_ОбновитьСвойства", ИменаСвойств);
		глМодель_ОбработатьДействия(КонтекстИзменений);
		
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		ДанныеКонтекста.Действия = ТекущиеДействия;
	Иначе
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеКонтекста.ПараметрыМодели.ИмяОбъекта);
		МенеджерОбъектов.Модель_ПриУстановкеСвойств(КонтекстИзменений, ИменаСвойств);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

// Возвращает значение свойства модели объекта
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - существующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ИмяСвойства	- Строка - 
// 
// Возвращаемое значение:
//   - 
//
Функция глМодель_ПолучитьСвойство(КонтекстИзменений, ИмяСвойства) Экспорт
	Если ТипЗнч(КонтекстИзменений) = Тип("УправляемаяФорма") Тогда
		ВладелецСвойств = КонтекстИзменений;
	Иначе
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			ВладелецСвойств = ДанныеКонтекста.ОбъектФорма;
		Иначе
			ВладелецСвойств = ДанныеКонтекста.Реквизиты;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВладелецСвойств[ИмяСвойства];
КонецФункции

// Инициирует обновление свойств таблицы модели объекта
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ДанныеСтроки - СтрокаКоллекции -
//				- Строка - имя таблицы
//  ИменаСвойств - Строка - имена обновляемых свойств через запятую, если не указано, обновляются все свойства
//
Процедура глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки = Неопределено, ИменаСвойств = Неопределено) Экспорт
	Если НЕ ЭтоКонтекстИзменений(КонтекстИзменений) Тогда
		глМодель_ОбновитьСвойстваСтроки(ИнициализироватьКонтекстИзменений(КонтекстИзменений), ИменаСвойств);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений) Тогда
		ТекущиеДействия = ДанныеКонтекста.Действия;
		ДанныеКонтекста.Действия = Новый Структура;
		ДанныеКонтекста.Действия.Вставить("глМодель_ОбновитьСвойстваСтроки", Новый Структура("ДанныеСтроки,ИменаСвойств", ДанныеСтроки, ИменаСвойств));
		глМодель_ОбработатьДействия(КонтекстИзменений);
		
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		ДанныеКонтекста.Действия = ТекущиеДействия;
	Иначе
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеКонтекста.ПараметрыМодели.ИмяОбъекта);
		МенеджерОбъектов.Модель_ПриУстановкеСвойствСтроки(КонтекстИзменений, ДанныеСтроки, ИменаСвойств);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

// Возвращает значение свойства модели объекта
//
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - сушествующий контекст изменений
// 					- УправляемаяФорма - форма изменяемого объекта
//  ДанныеСтроки - СтрокаКоллекции - 
//  ИмяСвойства	- Строка - имя свойства
// 
// Возвращаемое значение:
//   - 
//
Функция глМодель_ПолучитьСвойствоСтроки(КонтекстИзменений, ДанныеСтроки, ИмяСвойства) Экспорт
	Если ТипЗнч(КонтекстИзменений) = Тип("УправляемаяФорма") Тогда
		ВладелецСвойств = ДанныеСтроки;
	Иначе
		ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
		Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			ВладелецСвойств = ДанныеСтроки;
		Иначе
			ИмяТаблицы = глМодель_ПолучитьИмяРодителяСтроки(КонтекстИзменений, ДанныеСтроки);
			ТаблицаСтроки = ДанныеКонтекста.РеквизитыСтроки[ИмяТаблицы];
			ВладелецСвойств = ТаблицаСтроки.Найти(ДанныеСтроки, "Модель_СтрокаТаблицы");
			Если ВладелецСвойств = Неопределено Тогда
				ВладелецСвойств = ТаблицаСтроки.Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьЗначениеРеквизита(ВладелецСвойств, ИмяСвойства);
КонецФункции

// Возвращает массив из строки или коллекции
// 
// Параметры:
// 	Коллекция - Строка, Массив, ФиксированныйМассив -
// Возвращаемое значение:
// 	Массив - 
Функция глМодель_ПолучитьКлючи(Коллекция) Экспорт
	Если ТипЗнч(Коллекция) = Тип("Массив")
		ИЛИ ТипЗнч(Коллекция) = Тип("ФиксированныйМассив") Тогда
		
		Возврат Коллекция;
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Строка") Тогда
		Возврат СтрРазделить(Коллекция, ",", Ложь);
		
	Иначе
		МассивРезультат = Новый Массив;
		Для Каждого КлючИЗначение Из Коллекция Цикл
			МассивРезультат.Добавить(КлючИЗначение.Ключ);	
		КонецЦикла;
		
		Возврат МассивРезультат;
	КонецЕсли;
КонецФункции

#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
// Добавление дополнительного реквизита в модель
// 
// Параметры:
// 	КонтекстРодителя - Структура,ЛюбаяСсылка - Контекст изменений или результат добавления предыдущего реквизита
// 	ИмяРеквизита - Строка - (<имя существующей таблицы>.)<имя реквизита>
// 	ТипЗначения - ОписаниеТипов
// 			- Строка - строка подходящая для функции ПолучитьОписаниеТиповИзСтроки
// 	Хранение - Строка - способ хранения дополнительного реквизита
// 		* Вместе - данные реквизита хранятся вместе с объектом
// 		* Отдельно - данные реквизита хранятся отдельно от объекта
// 		* Нет - данные реквизита не хранятся
// Возвращаемое значение:
// 	Структура - контекст для добавления подчиненных реквизитов	
Функция глМодель_ДобавитьРеквизит(Знач КонтекстРодителя, ИмяРеквизита, Знач ТипЗначения = Неопределено, Хранение = "Нет") Экспорт
	Возврат глМодель_ДобавитьРеквизитТаблицы(КонтекстРодителя, Неопределено, ИмяРеквизита, ТипЗначения, Хранение);
КонецФункции

// Добавление дополнительного реквизита в таблицу объекта
// 
// Параметры:
// 	КонтекстРодителя - Структура,ЛюбаяСсылка - Контекст изменений
// 	ИмяРеквизита - Строка - (<имя существующей таблицы>.)<имя реквизита>
// 	ТипЗначения - ОписаниеТипов
// 			- Строка - строка подходящая для функции ПолучитьОписаниеТиповИзСтроки
// 	Хранение - Строка - способ хранения дополнительного реквизита
// 		* Вместе - данные реквизита хранятся вместе с объектом
// 		* Отдельно - данные реквизита хранятся отдельно от объекта
// 		* Нет - данные реквизита не хранятся
// Возвращаемое значение:
// 	Структура - контекст для добавления подчиненных реквизитов	
Функция глМодель_ДобавитьРеквизитТаблицы(Знач КонтекстРодителя, ИмяТаблицы, ИмяРеквизита, Знач ТипЗначения = Неопределено, Хранение = "Нет") Экспорт
	Если ЭтоОбъектСсылочногоТипа(КонтекстРодителя) Тогда
		КонтекстРодителя = ДанныеКонтекста(КонтекстРодителя);
	КонецЕсли;
	
	Если КонтекстРодителя.Свойство("ПодчиненныеРеквизиты") Тогда
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			ВызватьИсключение "Неверный вызов";
		КонецЕсли;
		
		ДобавленныеРеквизиты = КонтекстРодителя.ПодчиненныеРеквизиты;
		Путь = ?(ЗначениеЗаполнено(КонтекстРодителя.Путь), КонтекстРодителя.Путь
			+ ".", "") + КонтекстРодителя.Имя;
	
	Иначе
		Если Хранение = "Вместе" Тогда
			КонтекстРодителя.ПараметрыМодели.ЕстьРеквизитыВместе = Истина;
		ИначеЕсли Хранение = "Отдельно" Тогда
			КонтекстРодителя.ПараметрыМодели.ЕстьРеквизитыОтдельно = Истина;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			ДобавленныеРеквизиты = КонтекстРодителя.ПараметрыМодели.ДобавленныеРеквизитыТаблицы[ИмяТаблицы];
			Если ДобавленныеРеквизиты = Неопределено Тогда
				ДобавленныеРеквизиты = Новый Структура;
				КонтекстРодителя.ПараметрыМодели.ДобавленныеРеквизитыТаблицы.Вставить(ИмяТаблицы, ДобавленныеРеквизиты);
			КонецЕсли;
			
			Путь = "Объект." + ИмяТаблицы;
		Иначе
			ДобавленныеРеквизиты = КонтекстРодителя.ПараметрыМодели.ДобавленныеРеквизиты;
			Путь = "";
		КонецЕсли;
	КонецЕсли;

	Если ДобавленныеРеквизиты.Свойство(ИмяРеквизита) Тогда
		ВызватьИсключение СтрШаблон("Попытка повторного изменения структуры %1", ?(ЗначениеЗаполнено(Путь), Путь
			+ ".", "") + ИмяРеквизита);
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		ТипЗначения = Новый ОписаниеТипов;
	ИначеЕсли ТипЗнч(ТипЗначения) = Тип("Строка") Тогда
		ТипЗначения = ПолучитьОписаниеТиповИзСтроки(ТипЗначения);
	КонецЕсли;
	
	Если ИмяТаблицы = Неопределено
		И ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
		
		КонтекстРодителя.ПараметрыМодели.ДобавленныеТаблицы.Вставить(ИмяРеквизита, Истина);
	КонецЕсли;
	
	СвойстваРеквизита = Новый Структура("Путь,Имя,ТипЗначенияВнутр,Хранение,ПодчиненныеРеквизиты", Путь, ИмяРеквизита, ЗначениеВСтрокуВнутр(ТипЗначения), Хранение, Новый Структура);
	ДобавленныеРеквизиты.Вставить(ИмяРеквизита, СвойстваРеквизита);

	Возврат СвойстваРеквизита;
КонецФункции

// Получение дополнительных реквизитов модели
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - контекст изменений
// 	Путь - Строка - путь к родителю
// Возвращаемое значение:
// 	Массив - массив описаний дополнительных реквизитов, каждое из которых содержит
//		* Имя - имя дополнительного реквизита
//		* ТипЗначения - тип значения дополнительного реквизита
Функция глМодель_ПолучитьДобавленныеРеквизиты(КонтекстИзменений, Путь) Экспорт
	ПараметрыМодели = ДанныеКонтекста(КонтекстИзменений).ПараметрыМодели;
	
	МассивРезультат = Новый Массив;
	МассивПуть = СтрРазделить(Путь, ".");
	Если МассивПуть[0] = "Объект" Тогда
		ТекущийРодитель = ПараметрыМодели.ДобавленныеРеквизитыТаблицы[МассивПуть[1]];
		МассивПуть.Удалить(0);
		МассивПуть.Удалить(0);
	Иначе
		ТекущийРодитель = ПараметрыМодели.ДобавленныеРеквизиты;
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из МассивПуть Цикл
		ТекущийРодитель = ТекущийРодитель[ИмяРеквизита].ПодчиненныеРеквизиты;
	КонецЦикла;

	Для Каждого ЭлементСтруктуры Из ТекущийРодитель Цикл
		ПараметрыРеквизита = ЭлементСтруктуры.Значение;
		МассивРезультат.Добавить(Новый Структура("Имя,ТипЗначения", ПараметрыРеквизита.Имя, ЗначениеИзСтрокиВнутр(ПараметрыРеквизита.ТипЗначенияВнутр)));
	КонецЦикла;

	Возврат МассивРезультат;
КонецФункции

// Инициализация дополнительных реквизитов
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	ОбъектСсылка - ЛюбойОбъект - читаемый объект
//			- ЛюбаяСсылка - ссылка на исходный объект при копировании
Процедура глМодель_ПриЧтенииСозданииНаСервере(Форма, ОбъектСсылка) Экспорт
	Если глМодель_ЕстьРеквизиты(Форма, "Модель_Параметры") Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстИзменений = ИнициализироватьКонтекстИзменений(Форма, Истина);
	ПараметрыМодели = ДанныеКонтекста(КонтекстИзменений).ПараметрыМодели;
	
	Если ПараметрыМодели.Опции.Свойство("Реквизиты") Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		МенеджерОбъектов.Модель_ПриИнициализации(КонтекстИзменений);
		
		СоздатьРеквизиты(КонтекстИзменений);
	Иначе
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Модель_Параметры", Новый ОписаниеТипов()));
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Объект = глМодель_Данные(КонтекстИзменений);
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		ИЛИ ОбъектСсылка <> Объект.Ссылка Тогда
		
		Если ПараметрыМодели.ЕстьРеквизитыВместе
			ИЛИ ПараметрыМодели.ЕстьРеквизитыОтдельно Тогда
			
			МенеджерОбъектов.Модель_ПриЧтении(КонтекстИзменений, ОбъектСсылка, Ложь);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыМодели.Опции.Свойство("Свойства") Тогда
		глМодель_ОбновитьСвойства(КонтекстИзменений);
	КонецЕсли;

	Если ПараметрыМодели.Опции.Свойство("СвойстваСтроки") Тогда
		глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений);
	КонецЕсли;
	
	Форма.Модель_Параметры = ПреобразоватьВФиксированноеЗначение(ПараметрыМодели);
КонецПроцедуры


// Запись дополнительных реквизитов, хранимых вместе с объектом
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	Объект - ЛюбойОбъект
Процедура глМодель_ПередЗаписьюНаСервере(Форма, Объект) Экспорт
	КонтекстИзменений = ИнициализироватьКонтекстИзменений(Форма);
	ПараметрыМодели = ДанныеКонтекста(КонтекстИзменений).ПараметрыМодели;
	Если ПараметрыМодели.ЕстьРеквизитыВместе Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		МенеджерОбъектов.Модель_ПередЗаписью(КонтекстИзменений, Объект);
	КонецЕсли;
КонецПроцедуры

// Запись дополнительных реквизитов, хранимых отдельно от объекта
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	Объект - ЛюбойОбъект
Процедура глМодель_ПриЗаписиНаСервере(Форма, Объект) Экспорт
	КонтекстИзменений = ИнициализироватьКонтекстИзменений(Форма);
	ПараметрыМодели = ДанныеКонтекста(КонтекстИзменений).ПараметрыМодели;
	Если ПараметрыМодели.ЕстьРеквизитыОтдельно Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		МенеджерОбъектов.Модель_ПриЗаписи(КонтекстИзменений, Объект);
	КонецЕсли;
КонецПроцедуры

// Повторное чтение реквизитов и заполнение свойств строки
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	Объект - ЛюбойОбъект
Процедура глМодель_ПослеЗаписиНаСервере(Форма, Объект) Экспорт
	КонтекстИзменений = ИнициализироватьКонтекстИзменений(Форма);
	ПараметрыМодели = ДанныеКонтекста(КонтекстИзменений).ПараметрыМодели;

	Если ПараметрыМодели.ЕстьРеквизитыВместе
		ИЛИ ПараметрыМодели.ЕстьРеквизитыОтдельно  Тогда

		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		МенеджерОбъектов.Модель_ПриЧтении(КонтекстИзменений, Объект, Истина);
	КонецЕсли;

	Если ПараметрыМодели.Опции.Свойство("СвойстваСтроки") Тогда
		глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений);
	КонецЕсли;
КонецПроцедуры

// Завершение изменений объекта с последующей его записью
// 
// Параметры:
// 	КонтекстИзменений - ЛюбойОбъект - контекст измненений
// 	РежимЗаписи - РежимЗаписиДокумента - указывается для документа
// 	РежимПроведения - РежимПроведенияДокумента - указывается для документа
Процедура глМодель_ЗавершитьИзмененияИЗаписать(КонтекстИзменений, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Объект = КонтекстИзменений;
	
	Если ДанныеКонтекста.ИзмененныеТаблицы <> Неопределено Тогда
		ДанныеКонтекста.ОтложенноеИзменениеТаблиц = Ложь;
		Для Каждого ЭлементСоответствия Из ДанныеКонтекста.ИзмененныеТаблицы Цикл
			глМодель_ПриИзмененииРеквизитов(КонтекстИзменений, ЭлементСоответствия.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	глМодель_ОбработатьДействия(КонтекстИзменений);

	Если ДанныеКонтекста.ПараметрыМодели.ЕстьРеквизитыВместе Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		МенеджерОбъектов.Модель_ПередЗаписью(КонтекстИзменений, Объект);
	КонецЕсли;
	
	Если ДанныеКонтекста.ПараметрыМодели.ЕстьРеквизитыОтдельно Тогда
		МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Ссылка = МенеджерОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(Ссылка);
		Иначе
			Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		НачатьТранзакцию();
		МенеджерОбъектов.Модель_ПриЗаписи(КонтекстИзменений, Ссылка);
		
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			Объект.Записать(РежимЗаписи, РежимПроведения);
		Иначе
			Объект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Иначе
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			Объект.Записать(РежимЗаписи, РежимПроведения);
		Иначе
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;

	Объект.ДополнительныеСвойства.Удалить("Модель_КонтекстИзменений");
КонецПроцедуры

// Возвращает таблицу, которая содержит свойства в колонках
//
// Параметры:
//  КонтекстИзменений	 - Структура,ЛюбойОбъект - контекст изменений
//  ИмяТаблицы			 - Строка - имя получаемой таблицы
//  ИмяРеквизитаИсходнойСтроки - Строка - если указано, создается колонка с указанным именем, в которую записывается ссылка на данные исходной строки
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция глМодель_ПолучитьТаблицуСоСвойствами(КонтекстИзменений, ИмяТаблицы, ИмяРеквизитаИсходнойСтроки = Неопределено) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ТаблицаРезультат = ДанныеКонтекста.ОбъектФорма.Объект[ИмяТаблицы].Выгрузить();
		Если ИмяРеквизитаИсходнойСтроки <> Неопределено Тогда
			ИсходнаяТаблица = ДанныеКонтекста.ОбъектФорма.Объект[ИмяТаблицы];
			ТаблицаРезультат.Колонки.Добавить(ИмяРеквизитаИсходнойСтроки);
			Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
				СтрокаТаблицы[ИмяРеквизитаИсходнойСтроки] = ИсходнаяТаблица[СтрокаТаблицы.НомерСтроки - 1];
			КонецЦикла;
		КонецЕсли;
		
		Возврат ТаблицаРезультат;
	Иначе
		СтруктураДобавленныеРеквизиты = ДанныеКонтекста.ПараметрыМодели.ДобавленныеРеквизитыТаблицы[ИмяТаблицы];
		Если СтруктураДобавленныеРеквизиты <> Неопределено Тогда
			ТаблицаРезультат = КонтекстИзменений[ИмяТаблицы].ВыгрузитьКолонки();
			Если ИмяРеквизитаИсходнойСтроки <> Неопределено Тогда
				ТаблицаРезультат.Колонки.Добавить("Модель_СтрокаТаблицы");
			КонецЕсли;
			
			Для Каждого ЭлементСтруктуры Из СтруктураДобавленныеРеквизиты Цикл
				ПараметрыРеквизита = ЭлементСтруктуры.Значение;
				ТипЗначенияРеквизита = ЗначениеИзСтрокиВнутр(ПараметрыРеквизита.ТипЗначенияВнутр);

				ТаблицаРезультат.Колонки.Добавить(ПараметрыРеквизита.Имя, ТипЗначенияРеквизита);
			КонецЦикла;
			
			ТаблицаЗначенияСвойств = ДанныеКонтекста.РеквизитыСтроки[ИмяТаблицы];
			Для Каждого СтрокаТаблицы Из КонтекстИзменений[ИмяТаблицы] Цикл
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				СтрокаСвойств = ТаблицаЗначенияСвойств.Найти(СтрокаТаблицы, "Модель_СтрокаТаблицы");
				Если СтрокаСвойств <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвойств);
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяРеквизитаИсходнойСтроки <> Неопределено Тогда
				ТаблицаРезультат.Колонки["Модель_СтрокаТаблицы"].Имя = ИмяРеквизитаИсходнойСтроки;
			КонецЕсли;
		Иначе
			ТаблицаРезультат = КонтекстИзменений[ИмяТаблицы].Выгрузить();
			Если ИмяРеквизитаИсходнойСтроки <> Неопределено Тогда
				ИсходнаяТаблица = КонтекстИзменений[ИмяТаблицы];
				ТаблицаРезультат.Колонки.Добавить(ИмяРеквизитаИсходнойСтроки);
				Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
					СтрокаТаблицы[ИмяРеквизитаИсходнойСтроки] = ИсходнаяТаблица[СтрокаТаблицы.НомерСтроки - 1];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ТаблицаРезультат;
	КонецЕсли;
КонецФункции
#КонецЕсли
#КонецОбласти

#Область Интерфейс_Модель
// Регистрация действия модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ИмяДействия			 - Строка - имя вызываемой процедуры модуля менеджера
//  ИменаПараметров	- Строка - имена реквизитов, при изменении которых инициируется действие, через запятую
//					- Массив,ФиксированныйМассив - имена реквизитов, при изменении которых инициируется действие
//					- Соответствие,Структура - коллекция, имена реквизитов, при изменении которых инициируется действие
// 
// Возвращаемое значение:
//  Булево - 
//
Функция глМодель_ВыполнятьДействие(КонтекстИзменений, ИмяДействия, ИменаПараметров) Экспорт
	Возврат глМодель_ВыполнятьДействиеСтроки(КонтекстИзменений, Неопределено, ИмяДействия, ИменаПараметров);
КонецФункции

// Регистрация действия строки таблицы модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ИмяДействия			 - Строка - имя вызываемой процедуры модуля менеджера
//	ДанныеСтроки - СтрокаКоллекции - 
//  ИменаПараметров	- Строка - имена реквизитов, при изменении которых инициируется действие, через запятую
//					- Массив,ФиксированныйМассив - имена реквизитов, при изменении которых инициируется действие
//					- Соответствие,Структура - коллекция, имена реквизитов, при изменении которых инициируется действие
// 
// Возвращаемое значение:
//  Булево - 
//
Функция глМодель_ВыполнятьДействиеСтроки(КонтекстИзменений, ДанныеСтроки, ИмяДействия, ИменаПараметров) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Если ДанныеКонтекста.НомерЭтапа <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ДанныеСтроки = Неопределено Тогда
		СтруктураОбработчиков = ДанныеКонтекста.Обработчики;
	Иначе
		СтруктураОбработчиков = ДанныеКонтекста.ОбработчикиСтроки[ДанныеСтроки];
	КонецЕсли;
	
	ПараметрНайден = Ложь;
	Для Каждого ИмяПараметра Из глМодель_ПолучитьКлючи(ИменаПараметров) Цикл
		Если СтруктураОбработчиков.Параметры[ИмяПараметра] <> Неопределено Тогда
			ПараметрНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрНайден Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеКонтекста.ИмяТекущегоДействия = ИмяДействия;
	
	Если НЕ ДанныеКонтекста.Действия.Свойство(ИмяДействия) Тогда
		ДанныеКонтекста.Действия.Вставить(ИмяДействия, Новый Структура);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Установка параметра текущего действия
//
// Параметры:
//  КонтекстИзменений	 - Структура, ЛюбойОбъект - контекст изменений
//  ИмяПараметра		 - Строка - 
//  Значение			 - 	 - 
//
Процедура глМодель_УстановитьПараметрДействия(КонтекстИзменений, ИмяПараметра, Значение) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	ПараметрыДействия = ДанныеКонтекста.Действия[ДанныеКонтекста.ИмяТекущегоДействия];
	ПараметрыДействия.Вставить(ИмяПараметра, Значение);
КонецПроцедуры

// Удаление текущего действия
//
// Параметры:
//  КонтекстИзменений	 - Структура,ЛюбойОбъект - контекст изменений
//
Процедура глМодель_УдалитьДействие(КонтекстИзменений) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	ДанныеКонтекста.Действия.Удалить(ДанныеКонтекста.ИмяТекущегоДействия);
КонецПроцедуры

// Регистрация обработчика модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ИменаРезультатов			 - Строка - имена реквизитов через запятую, которые устанавливает обработчик
//  ИменаПараметров			 - Строка - имена реквизитов и свойств через запятую, от которых зависит обработчик
//  ТребуетсяВызовСервера	 - Булево - если Истина, то требуется вызов сервера для выполнения обработчика
// 
// Возвращаемое значение:
//  Булево - 
//
Функция глМодель_ВыполнятьОбработчик(КонтекстИзменений, ИменаРезультатов, ИменаПараметров, ТребуетсяВызовСервера = Ложь) Экспорт
	Возврат глМодель_ВыполнятьОбработчикСтроки(КонтекстИзменений, Неопределено, ИменаРезультатов, ИменаПараметров, ТребуетсяВызовСервера);
КонецФункции

// Регистрация обработчика строки таблицы модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура, ЛюбойОбъект - контекст изменений
//  ДанныеСтроки			 - СтрокаКоллекции - измененная строка
//  ИменаРезультатов			 - Строка - имена реквизитов через запятую, которые устанавливает обработчик
//  ИменаПараметров			 - Строка - имена реквизитов и свойств через запятую, от которых зависит обработчик
//  ТребуетсяВызовСервера	 - Булево - если Истина, то требуется вызов сервера для выполнения обработчика
// 
// Возвращаемое значение:
//  Булево - 
//
Функция глМодель_ВыполнятьОбработчикСтроки(КонтекстИзменений, ДанныеСтроки, ИменаРезультатов, ИменаПараметров, ТребуетсяВызовСервера = Ложь) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Если ДанныеКонтекста.НомерЭтапа > 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеСтроки = Неопределено Тогда
		СтруктураОбработчиков = ДанныеКонтекста.Обработчики;
		Данные = глМодель_Данные(КонтекстИзменений);
	Иначе
		СтруктураОбработчиков = ДанныеКонтекста.ОбработчикиСтроки[ДанныеСтроки];
		Данные = ДанныеСтроки;
	КонецЕсли;
	
	ИдентификаторОбработчика = ИменаРезультатов + "@" + ИменаПараметров;
	Если ДанныеКонтекста.НомерЭтапа = 2 Тогда
		Если СтруктураОбработчиков.Результаты[ИдентификаторОбработчика] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого ИмяПараметра Из глМодель_ПолучитьКлючи(ИменаПараметров) Цикл
			Если Лев(ИмяПараметра, 1) = "["
				И Прав(ИмяПараметра, 1) = "]" Тогда
					
				ИмяСвойства = Сред(ИмяПараметра, 2, СтрДлина(ИмяПараметра) - 2);
				Если СтруктураОбработчиков.Свойства[ИмяСвойства] <> Неопределено Тогда
					СтруктураОбработчиков.СвойстваКОбновлению.Вставить(ИмяСвойства, Истина);
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли СтруктураОбработчиков.Результаты[ИмяПараметра] <> Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеКонтекста.ЕстьИзменения = Истина;
		
		СтруктураОбработчиков.Результаты.Удалить(ИдентификаторОбработчика);
		Для Каждого ИмяРезультата Из глМодель_ПолучитьКлючи(ИменаРезультатов) Цикл
			СтруктураОбработчиков.Результаты.Удалить(ИмяРезультата);
		КонецЦикла;
		
		Возврат Истина;
	Иначе
		Если СтруктураОбработчиков.Идентификаторы[ИдентификаторОбработчика] <> Неопределено Тогда
			ВызватьИсключение СтрШаблон("Повторное определение обработчика с идентификатором %1", ИдентификаторОбработчика);
		Иначе
			СтруктураОбработчиков.Идентификаторы.Вставить(ИдентификаторОбработчика, Истина);
		КонецЕсли;
		
		Если СтруктураОбработчиков.Результаты[ИдентификаторОбработчика] <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивИменаРезультата = глМодель_ПолучитьКлючи(ИменаРезультатов);
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			Если СтруктураОбработчиков.ИзмененныеРеквизиты[ИмяРезультата] <> Неопределено Тогда
				Возврат Ложь;	
			КонецЕсли;
		КонецЦикла;
		
		МассивИменаПараметров = глМодель_ПолучитьКлючи(ИменаПараметров);
		ПараметрНайден = Ложь;
		Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
			Если СтруктураОбработчиков.Параметры[ИмяПараметра] <> Неопределено Тогда
				ПараметрНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПараметрНайден Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ глМодель_ЕстьРеквизиты(Данные, ИменаРезультатов + "," + ИменаПараметров) Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			ПараметрыРезультата = СтруктураОбработчиков.ЗависимостиПрямые[ИмяРезультата];
			Если ПараметрыРезультата <> Неопределено Тогда
				Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
					Если ПараметрыРезультата[ИмяПараметра] <> Неопределено Тогда
						Сообщить(СтрШаблон(НСтр("ru = 'Обнаружено повторное определение зависимости поля %1 от поля %2'"), ИмяРезультата, ИмяПараметра));
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыРезультата = СтруктураОбработчиков.ЗависимостиОбратные[ИмяРезультата];
			Если ПараметрыРезультата <> Неопределено Тогда
				Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
					Если ПараметрыРезультата[ИмяПараметра] <> Неопределено Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			ПараметрыРезультата = СтруктураОбработчиков.ЗависимостиПрямые[ИмяРезультата];
			Если ПараметрыРезультата = Неопределено Тогда
				ПараметрыРезультата = Новый Соответствие;
				СтруктураОбработчиков.ЗависимостиПрямые.Вставить(ИмяРезультата, ПараметрыРезультата);
			КонецЕсли;
			
			Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
				РезультатыПараметра = СтруктураОбработчиков.ЗависимостиОбратные[ИмяПараметра];
				Если РезультатыПараметра = Неопределено Тогда
					РезультатыПараметра = Новый Соответствие;
					СтруктураОбработчиков.ЗависимостиОбратные.Вставить(ИмяПараметра, РезультатыПараметра);
				КонецЕсли;
				
				РезультатыПараметра.Вставить(ИмяРезультата, Истина);
				ПараметрыРезультата.Вставить(ИмяПараметра, Истина);
			КонецЦикла;
			
			СтруктураОбработчиков.ИзмененныеРеквизиты.Вставить(ИмяРезультата, Истина);
		КонецЦикла;
		
		ДанныеКонтекста.ЕстьИзменения = Истина;
		Для Каждого ИмяРезультата Из МассивИменаРезультата Цикл
			СтруктураОбработчиков.Параметры.Вставить(ИмяРезультата, Истина);
			СтруктураОбработчиков.Результаты.Вставить(ИмяРезультата, Истина);
		КонецЦикла;
		
		СтруктураОбработчиков.Результаты.Вставить(ИдентификаторОбработчика, Истина);
		
		Если ТребуетсяВызовСервера Тогда
			ДанныеКонтекста.ТребуетсяВызовСервера = Истина;
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
КонецФункции


// Проверяет, будут ли изменены реквизиты в результате выполнения обработчиков
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - контекст изменений
// 	ИменаРеквизитов - Строка - имена проверяемых реквизитов через запятую
// 	УчитыватьЧастичноеИзменениеТаблицы - Булево - нужно ли учитывать изменения отдельных строк таблицы
// Возвращаемое значение:
// 	Булево - 
Функция глМодель_РеквизитыИзменены(КонтекстИзменений, ИменаРеквизитов, УчитыватьЧастичноеИзменениеТаблицы = Ложь) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	ЕстьИзменения = Ложь;
	Для Каждого ИмяРеквизита Из глМодель_ПолучитьКлючи(ИменаРеквизитов) Цикл
		РезультатИзменения = ДанныеКонтекста.Обработчики.ИзмененныеРеквизиты[ИмяРеквизита];
		Если РезультатИзменения = Истина
			ИЛИ РезультатИзменения <> Неопределено
				И УчитыватьЧастичноеИзменениеТаблицы Тогда
			
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
КонецФункции

// Проверяет, будут ли изменены реквизиты строки в результате выполнения обработчиков
// 
// Параметры:
// 	КонтекстИзменений 	- Структура, ЛюбойОбъект - контекст изменений
//  ДанныеСтроки 		- СтрокаКоллекции - 
// 	ИменаРеквизитов 	- Строка - имена проверяемых реквизитов через запятую
// Возвращаемое значение:
// 	Булево - 
Функция глМодель_РеквизитыСтрокиИзменены(КонтекстИзменений, ДанныеСтроки, ИменаРеквизитов) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	ЕстьИзменения = Ложь;
	Для Каждого ИмяРеквизита Из глМодель_ПолучитьКлючи(ИменаРеквизитов) Цикл
		РезультатИзменения = ДанныеКонтекста.ОбработчикиСтроки[ДанныеСтроки].ИзмененныеРеквизиты[ИмяРеквизита];
		Если РезультатИзменения = Истина Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
КонецФункции

// Возвращает массив измененных строк таблицы
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - контекст изменений
// 	ИмяТаблицы - Строка
// Возвращаемое значение:
// 	Массив - 
Функция глМодель_ПолучитьИзмененныеСтроки(КонтекстИзменений, ИмяТаблицы) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	РезультатИзменения = ДанныеКонтекста.Обработчики.ИзмененныеРеквизиты[ИмяТаблицы];
	Если РезультатИзменения = Истина
		ИЛИ РезультатИзменения = Неопределено Тогда
	
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат глМодель_ПолучитьКлючи(РезультатИзменения);
КонецФункции

// Описание свойств модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура, ЛюбойОбъект - контекст изменений
//  ИменаСвойств		 - Строка - имена описываемых свойств, разделенные запятыми
//  ИменаПараметров		 - Строка - имена реквизитов и свойств, от которых зависят описываемые свойства
//
Процедура глМодель_ОбновлятьСвойства(КонтекстИзменений, ИменаСвойств, ИменаПараметров) Экспорт
	глМодель_ОбновлятьСвойстваСтроки(КонтекстИзменений, Неопределено, ИменаСвойств, ИменаПараметров);
КонецПроцедуры

// Описание свойств строки таблицы модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура, ЛюбойОбъект - контекст изменений
//  ДанныеСтроки		 - СтрокаКоллекции	 - 
//  ИменаСвойств		 - Строка - имена описываемых свойств, разделенные запятыми
//  ИменаПараметров		 - Строка - имена реквизитов и свойств, от которых зависят описываемые свойства
//
Процедура глМодель_ОбновлятьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ИменаСвойств, ИменаПараметров) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Если ДанныеКонтекста.НомерЭтапа <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки = Неопределено Тогда
		СтруктураОбработчиков = ДанныеКонтекста.Обработчики;
		Данные = глМодель_Данные(КонтекстИзменений);
	Иначе
		СтруктураОбработчиков = ДанныеКонтекста.ОбработчикиСтроки[ДанныеСтроки];
		Данные = ДанныеСтроки;
	КонецЕсли;
	
	Если НЕ глМодель_ЕстьРеквизиты(Данные, ИменаПараметров) Тогда
		Возврат;
	КонецЕсли;

	МассивИменаСвойств = глМодель_ПолучитьКлючи(ИменаСвойств);
	МассивИменаПараметров = глМодель_ПолучитьКлючи(ИменаПараметров);
	Для Каждого ИмяПараметра Из МассивИменаПараметров Цикл
		Если СтруктураОбработчиков.Параметры[ИмяПараметра] <> Неопределено Тогда
			Для Каждого ИмяСвойства Из МассивИменаСвойств Цикл
				Если СтруктураОбработчиков.Свойства[ИмяСвойства] = Неопределено Тогда
					СтруктураОбработчиков.Свойства.Вставить(ИмяСвойства, МассивИменаПараметров);
					СтруктураОбработчиков.Параметры.Вставить("[" + ИмяСвойства + "]", Истина);
					ДанныеКонтекста.ТребуетсяВызовСервера = Истина;
					ДанныеКонтекста.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяем принадлежность строки коллекции определенной таблице модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ДанныеСтроки		 - СтрокаКоллекции - 
//  ИмяТаблицы			 - Строка - имя таблицы
// 
// Возвращаемое значение:
//  Булево - Истина, если строка принадлежит коллекции, Ложь - в остальных случаях
//
Функция глМодель_СтрокаПринадлежитКоллекции(КонтекстИзменений, ДанныеСтроки, ИмяКоллекции) Экспорт
	Если глМодель_ЕстьРеквизиты(ДанныеСтроки, "Модель_ИмяРодителя") Тогда
		Возврат ДанныеСтроки.Модель_ИмяРодителя = ИмяКоллекции;
	ИначеЕсли ДанныеКонтекста(КонтекстИзменений).ПараметрыМодели.ДобавленныеТаблицы.Получить(ИмяКоллекции) <> Неопределено Тогда
		Возврат глМодель_Данные(КонтекстИзменений, ИмяКоллекции).Индекс(ДанныеСтроки) >= 0;
	Иначе
		Возврат глМодель_Данные(КонтекстИзменений)[ИмяКоллекции].Индекс(ДанныеСтроки) >= 0;
	КонецЕсли;
КонецФункции

// Возвратащет имя родителя для строки коллекции
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ДанныеСтроки		 - СтрокаКоллекции - 
// 
// Возвращаемое значение:
//  Строка - 
//
Функция глМодель_ПолучитьИмяРодителяСтроки(КонтекстИзменений, ДанныеСтроки) Экспорт
	Если глМодель_ЕстьРеквизиты(ДанныеСтроки, "Модель_ИмяРодителя") Тогда
		Возврат ДанныеСтроки.Модель_ИмяРодителя;
	КонецЕсли;
	
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	ИмяТаблицы = ДанныеКонтекста.ПараметрыСтроки[ДанныеСтроки];
	Если ИмяТаблицы = Неопределено Тогда
		Для Каждого ТекущееИмяТаблицы Из ДанныеКонтекста.ПараметрыМодели.ИменаТаблиц Цикл
			Если глМодель_СтрокаПринадлежитКоллекции(КонтекстИзменений, ДанныеСтроки, ТекущееИмяТаблицы) Тогда
				ДанныеКонтекста.ПараметрыСтроки.Вставить(ДанныеСтроки, ТекущееИмяТаблицы);
				ИмяТаблицы = ТекущееИмяТаблицы;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущееИмяТаблицы Из глМодель_ПолучитьКлючи(ДанныеКонтекста.ПараметрыМодели.ДобавленныеТаблицы) Цикл
			Если глМодель_СтрокаПринадлежитКоллекции(КонтекстИзменений, ДанныеСтроки, ТекущееИмяТаблицы) Тогда
				ДанныеКонтекста.ПараметрыСтроки.Вставить(ДанныеСтроки, ТекущееИмяТаблицы);
				ИмяТаблицы = ТекущееИмяТаблицы;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяТаблицы = Неопределено Тогда
		ВызватьИсключение "Строка не принадлежит объекту";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
КонецФункции

// Устанавливает свойство модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ИмяСвойства			 - Строка - 
//  Значение			 - 	 - 
//
Процедура глМодель_УстановитьСвойство(КонтекстИзменений, ИмяСвойства, Значение) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ВладелецСвойств = ДанныеКонтекста.ОбъектФорма;
	Иначе
		ВладелецСвойств = ДанныеКонтекста.Реквизиты;
	КонецЕсли;
	
	ВладелецСвойств[ИмяСвойства] = Значение;	
КонецПроцедуры

// Устанавливает свойство строки модели объекта
//
// Параметры:
//  КонтекстИзменений	 - Структура - контекст изменений
//  ДанныеСтроки		 - СтрокаКоллекции	 - 
//  ИмяСвойства			 - Строка	 - 
//  Значение			 - 	 - 
//
Процедура глМодель_УстановитьСвойствоСтроки(КонтекстИзменений, ДанныеСтроки, ИмяСвойства, Значение) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ВладелецСвойств = ДанныеСтроки;
	Иначе
		ИмяТаблицы = глМодель_ПолучитьИмяРодителяСтроки(КонтекстИзменений, ДанныеСтроки);
		ТаблицаСтроки = ДанныеКонтекста.РеквизитыСтроки[ИмяТаблицы];
		ВладелецСвойств = ТаблицаСтроки.Найти(ДанныеСтроки, "Модель_СтрокаТаблицы");
		Если ВладелецСвойств = Неопределено Тогда
			ВладелецСвойств = ТаблицаСтроки.Добавить();
			ВладелецСвойств.Модель_СтрокаТаблицы = ДанныеСтроки;
		КонецЕсли;
	КонецЕсли;

	ВладелецСвойств[ИмяСвойства] = Значение;
КонецПроцедуры

// Проверка необходимости установки свойств по списку требуемых свойств
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - контекст измненений
// 	ИмяСвойства - Строка - имена проверяемых свойств, разделенные запятыми
// 	ТребуемыеСвойства - имена требуемых свойств, разделенные запятыми
// Возвращаемое значение:
// 	Булево - Истина, если необходимо устанавливать свойство. Ложь, в остальных случаях
Функция глМодель_ТребуетсяУстановитьСвойства(КонтекстИзменений, ИменаСвойств, ТребуемыеСвойства) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	ДанныеКонтекста.ИмяТекущегоСвойства = ИменаСвойств;
	ДанныеКонтекста.ДанныеСтрокиТекущегоСвойства = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ТребуемыеСвойства) Тогда
		Возврат Истина;
	Иначе
		МассивТребуемыеСвойства = глМодель_ПолучитьКлючи(ТребуемыеСвойства);
		Для Каждого ИмяСвойства Из глМодель_ПолучитьКлючи(ИменаСвойств) Цикл
			Если МассивТребуемыеСвойства.Найти(ИмяСвойства) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Проверка необходимости установки свойств строки по списку требуемых свойств
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - контекст измненений
// 	ИмяСвойства - Строка - имена проверяемых свойств, разделенные запятыми
// 	ТребуемыеСвойства - имена требуемых свойств, разделенные запятыми
// Возвращаемое значение:
// 	Булево - Истина, если необходимо устанавливать свойство. Ложь, в остальных случаях
Функция глМодель_ТребуетсяУстановитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ИменаСвойств, ТребуемыеСвойства) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Результат = глМодель_ТребуетсяУстановитьСвойства(КонтекстИзменений, ИменаСвойств, ТребуемыеСвойства);
	ДанныеКонтекста.ДанныеСтрокиТекущегоСвойства = ДанныеСтроки;
	
	Возврат Результат;
КонецФункции

// Установка значения последнего свойства, проверенного функцией глМодель_ТребуетсяУстановкаСвойства или Модель_ТребуетсяУстановкаСвойстваСтроки
// 
// Параметры:
// 	КонтекстИзменений - Структура, ЛюбойОбъект - контекст измненений
// 	Значение
Процедура глМодель_УстановитьЗначениеСвойства(КонтекстИзменений, Значение) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Если ДанныеКонтекста.ДанныеСтрокиТекущегоСвойства <> Неопределено Тогда
		глМодель_УстановитьСвойствоСтроки(КонтекстИзменений
			,ДанныеКонтекста.ДанныеСтрокиТекущегоСвойства, ДанныеКонтекста.ИмяТекущегоСвойства, Значение);
	Иначе
		глМодель_УстановитьСвойство(КонтекстИзменений, ДанныеКонтекста.ИмяТекущегоСвойства, Значение);
	КонецЕсли
КонецПроцедуры

Функция глМодель_ОтложенноеИзменениеТаблиц(КонтекстИзменений) Экспорт
	Возврат ДанныеКонтекста(КонтекстИзменений).ОтложенноеИзменениеТаблиц;	
КонецФункции
#КонецОбласти

Функция ЭтоКонтекстИзменений(КонтекстИзменений)
	Возврат ТипЗнч(КонтекстИзменений) = Тип("Структура")
		ИЛИ ЭтоОбъектСсылочногоТипа(КонтекстИзменений);
КонецФункции

Функция ИнициализироватьКонтекстИзменений(ОбъектФорма, ИнициализацияФормы = Ложь)
	КонтекстИзменений = Новый Структура;
	КонтекстИзменений.Вставить("ОбъектФорма");
	КонтекстИзменений.Вставить("Действия", Новый Структура);
	КонтекстИзменений.Вставить("ОбработанныеДействия", Новый Соответствие);
	КонтекстИзменений.Вставить("ОбрабатыватьДействия", Истина);
	КонтекстИзменений.Вставить("ПараметрыСтроки", Новый Соответствие);
	КонтекстИзменений.Вставить("Обработчики");
	КонтекстИзменений.Вставить("ОбработчикиСтроки", Новый Соответствие);
	КонтекстИзменений.Вставить("НомерЭтапа");
	КонтекстИзменений.Вставить("ЕстьИзменения");
	КонтекстИзменений.Вставить("ИмяТекущегоДействия");
	КонтекстИзменений.Вставить("ИмяТекущегоСвойства");
	КонтекстИзменений.Вставить("ДанныеСтрокиТекущегоСвойства");
	КонтекстИзменений.Вставить("ТребуетсяВызовСервера", Ложь);
	КонтекстИзменений.Вставить("ПродолжениеВыполнения", Ложь);
	КонтекстИзменений.Вставить("ИзмененныеТаблицы");
	КонтекстИзменений.Вставить("Реквизиты", Новый Структура);
	КонтекстИзменений.Вставить("РеквизитыСтроки", Новый Соответствие);
	КонтекстИзменений.Вставить("ПараметрыМодели");
	КонтекстИзменений.Вставить("ОтложенноеИзменениеТаблиц", Ложь);
	КонтекстИзменений.Вставить("УровеньВложенности", 0);
	
	Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма")
		И НЕ ИнициализацияФормы Тогда
			
		КонтекстИзменений.ПараметрыМодели = ОбъектФорма.Модель_Параметры;
	Иначе
		#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		КонтекстИзменений.ПараметрыМодели = ПолучитьПараметрыМодели(ОбъектФорма);
		#КонецЕсли
	КонецЕсли;

	Если ЭтоОбъектСсылочногоТипа(ОбъектФорма) Тогда
		ОбъектФорма.ДополнительныеСвойства.Вставить("Модель_КонтекстИзменений", КонтекстИзменений);
		
		Возврат ОбъектФорма;
	Иначе
		КонтекстИзменений.ОбъектФорма = ОбъектФорма;
		Возврат КонтекстИзменений;
	КонецЕсли;
КонецФункции

Функция ДанныеКонтекста(КонтекстИзмененийОбъект)
	Если ТипЗнч(КонтекстИзмененийОбъект) = Тип("Структура") Тогда
		Возврат КонтекстИзмененийОбъект;
	Иначе
		Возврат КонтекстИзмененийОбъект.ДополнительныеСвойства.Модель_КонтекстИзменений;
	КонецЕсли;
КонецФункции

Функция глМодель_ОбработатьДействия(КонтекстИзменений, Форма = Неопределено) Экспорт
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	
	Если НЕ ДанныеКонтекста.ОбрабатыватьДействия Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		ДанныеКонтекста.ОбъектФорма = Форма;
	КонецЕсли;
	
	Если ДанныеКонтекста.Действия.Количество() > 0 Тогда
		Если ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений) Тогда
			ТекущийОбъектФорма = ДанныеКонтекста.ОбъектФорма;
			ТекущиеПараметрыСтроки = ДанныеКонтекста.ПараметрыСтроки;
			ТекущиеОбработчики = ДанныеКонтекста.Обработчики;
			ТекущиеОбработчикиСтроки = ДанныеКонтекста.ОбработчикиСтроки;
			ТекущиеИзмененныеТаблицы = ДанныеКонтекста.ИзмененныеТаблицы;
			
			ПараметрыДействия = Неопределено;
			Если ДанныеКонтекста.Действия.Свойство("глМодель_ОбновитьСвойстваСтроки", ПараметрыДействия) Тогда
				Если ТипЗнч(ПараметрыДействия.ДанныеСтроки) <> Тип("Строка") Тогда
					ПараметрыДействия.ДанныеСтроки = ПолучитьКлючСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				КонецЕсли;
				
				ДанныеКонтекста.ПараметрыСтроки = Новый Соответствие;
				ДанныеКонтекста.Обработчики = Неопределено;
				ДанныеКонтекста.ОбработчикиСтроки = Новый Соответствие;
				
			ИначеЕсли ДанныеКонтекста.Действия.Свойство("глМодель_ПриИзмененииРеквизита", ПараметрыДействия) Тогда
				СохранитьДанныеПродолжения(КонтекстИзменений, ДанныеКонтекста);
				
			ИначеЕсли ДанныеКонтекста.Действия.Свойство("глМодель_ПриИзмененииРеквизитаСтроки", ПараметрыДействия) Тогда
				Если ПараметрыДействия.ДанныеСтроки <> Неопределено Тогда
					ПараметрыДействия.ДанныеСтроки = ПолучитьКлючСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				КонецЕсли;
				
				СохранитьДанныеПродолжения(КонтекстИзменений, ДанныеКонтекста);
			Иначе
				ДанныеКонтекста.ПараметрыСтроки = Новый Соответствие;
				ДанныеКонтекста.Обработчики = Неопределено;
				ДанныеКонтекста.ОбработчикиСтроки = Новый Соответствие;
			КонецЕсли;
			
			ДанныеКонтекста.ОбъектФорма = Неопределено;
			ТекущийОбъектФорма.Модель_ОбработатьДействия(КонтекстИзменений);
			
			ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
			ДанныеКонтекста.ОбъектФорма = ТекущийОбъектФорма;
			ДанныеКонтекста.ПараметрыСтроки = ТекущиеПараметрыСтроки;
			ДанныеКонтекста.Обработчики = ТекущиеОбработчики;
			ДанныеКонтекста.ОбработчикиСтроки = ТекущиеОбработчикиСтроки;
			ДанныеКонтекста.ИзмененныеТаблицы = ТекущиеИзмененныеТаблицы;
		Иначе
			#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			ПараметрыДействия = Неопределено;
			Если ДанныеКонтекста.Действия.Свойство("глМодель_ОбновитьСвойства", ПараметрыДействия) Тогда
				глМодель_ОбновитьСвойства(КонтекстИзменений, ПараметрыДействия);
				
			ИначеЕсли ДанныеКонтекста.Действия.Свойство("глМодель_ОбновитьСвойстваСтроки", ПараметрыДействия) Тогда
				Если ТипЗнч(ПараметрыДействия.ДанныеСтроки) <> Тип("Строка") Тогда
					ДанныеСтроки = ПолучитьДанныеСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				Иначе
					ДанныеСтроки = ПараметрыДействия.ДанныеСтроки;
				КонецЕсли;
				
				глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, ПараметрыДействия.ИменаСвойств);
				ДанныеКонтекста.Действия = Новый Структура;
				
			ИначеЕсли ДанныеКонтекста.Действия.Свойство("глМодель_ПриИзмененииРеквизита", ПараметрыДействия) Тогда
				ПрименитьДанныеПродолжения(КонтекстИзменений, ДанныеКонтекста);
				
				ДанныеКонтекста.Действия = ПараметрыДействия.Действия;
				глМодель_ПриИзмененииРеквизитов(КонтекстИзменений, ПараметрыДействия.ИменаРеквизитов);
				глМодель_ОбработатьДействия(КонтекстИзменений);
			
			ИначеЕсли ДанныеКонтекста.Действия.Свойство("глМодель_ПриИзмененииРеквизитаСтроки", ПараметрыДействия) Тогда
				Если ПараметрыДействия.ДанныеСтроки <> Неопределено Тогда
					ДанныеСтроки = ПолучитьДанныеСтроки(КонтекстИзменений, ПараметрыДействия.ДанныеСтроки);
				Иначе
					ДанныеСтроки = Неопределено;
				КонецЕсли;
				
				ПрименитьДанныеПродолжения(КонтекстИзменений, ДанныеКонтекста);
				
				ДанныеКонтекста.Действия = ПараметрыДействия.Действия;
				глМодель_ПриИзмененииРеквизитовСтроки(КонтекстИзменений, ДанныеСтроки, ПараметрыДействия.ИменаРеквизитов);
				глМодель_ОбработатьДействия(КонтекстИзменений);
				
			Иначе
				МенеджерОбъектов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеКонтекста.ПараметрыМодели.ИмяОбъекта);
				
				ДействияКОбработке = Новый Структура;
				Для Каждого СтруктураДействия Из ДанныеКонтекста.Действия Цикл
					ИдентификаторДействия = СтруктураДействия.Ключ + ЗначениеВСтрокуВнутр(СтруктураДействия.Значение);
					
					Если ДанныеКонтекста.ОбработанныеДействия[ИдентификаторДействия] = Неопределено Тогда
						ДействияКОбработке.Вставить(СтруктураДействия.Ключ, СтруктураДействия.Значение);
						ДанныеКонтекста.ОбработанныеДействия.Вставить(ИдентификаторДействия, Истина);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеКонтекста.Действия = Новый Структура;
				ДанныеКонтекста.ОбрабатыватьДействия = Ложь;
				Для Каждого СтруктураДействия Из ДействияКОбработке Цикл
					Выполнить("МенеджерОбъектов." + СтруктураДействия.Ключ + "(КонтекстИзменений, СтруктураДействия.Значение)");
				КонецЦикла;
				ДанныеКонтекста.ОбрабатыватьДействия = Истина;
				
				глМодель_ОбработатьДействия(КонтекстИзменений);
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		ДанныеКонтекста.ОбъектФорма = Неопределено;
		ДанныеКонтекста.ПараметрыСтроки.Очистить();
		ДанныеКонтекста.Обработчики = Неопределено;
		ДанныеКонтекста.ОбработчикиСтроки.Очистить();
		ДанныеКонтекста.ИзмененныеТаблицы = Неопределено;
		ДанныеКонтекста.ДанныеСтрокиТекущегоСвойства = Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОбновитьСвойства(КонтекстИзменений, ДанныеСтроки, СтруктураОбработчиков, ОкончательныйРасчет = Ложь)
	Если НЕ ОкончательныйРасчет
		И СтруктураОбработчиков.СвойстваКОбновлению.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	МассивСвойстваКОбновлению = Новый Массив;
	Для Каждого ДанныеСвойства Из СтруктураОбработчиков.Свойства Цикл
		Если НЕ ОкончательныйРасчет
			И СтруктураОбработчиков.СвойстваКОбновлению[ДанныеСвойства.Ключ] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыСвойстваРассчитаны = Истина;
		Для Каждого ИмяПараметра Из ДанныеСвойства.Значение Цикл
			Если Лев(ИмяПараметра, 1) = "["
				И Прав(ИмяПараметра, 1) = "]" Тогда
			
				ИмяСвойства = Сред(ИмяПараметра, СтрДлина(ИмяПараметра) - 2);
				Если СтруктураОбработчиков.Свойства[ИмяСвойства] <> Неопределено Тогда
					ПараметрыСвойстваРассчитаны = Ложь;
					Прервать;
				КонецЕсли;
			
			ИначеЕсли СтруктураОбработчиков.Результаты[ИмяПараметра] <> Неопределено Тогда
				ПараметрыСвойстваРассчитаны = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыСвойстваРассчитаны Тогда
			МассивСвойстваКОбновлению.Добавить(ДанныеСвойства.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяСвойства Из МассивСвойстваКОбновлению Цикл
		СтруктураОбработчиков.Свойства.Удалить(ИмяСвойства);
	КонецЦикла;
	
	Если МассивСвойстваКОбновлению.Количество() > 0 Тогда
		Если ДанныеСтроки = Неопределено Тогда
			глМодель_ОбновитьСвойства(КонтекстИзменений, СтрСоединить(МассивСвойстваКОбновлению, ","));
		Иначе
			глМодель_ОбновитьСвойстваСтроки(КонтекстИзменений, ДанныеСтроки, СтрСоединить(МассивСвойстваКОбновлению, ","));
		КонецЕсли;
		
		ДанныеКонтекста(КонтекстИзменений).ЕстьИзменения = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСтруктуруОбработчиков()
	Возврат Новый Структура("Результаты,Параметры,ЗависимостиПрямые,ЗависимостиОбратные,Свойства,СвойстваКОбновлению,Идентификаторы,ИзмененныеРеквизиты"
			,Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие);
КонецФункции
		
Функция ПолучитьКлючСтроки(КонтекстИзменений, ДанныеСтроки)
	Возврат Новый Структура("ИмяТаблицы,ИдентификаторСтроки"
		,глМодель_ПолучитьИмяРодителяСтроки(КонтекстИзменений, ДанныеСтроки)
		,ДанныеСтроки.ПолучитьИдентификатор());
КонецФункции

Функция ПолучитьДанныеСтроки(КонтекстИзменений, Ключ)
	Объект = глМодель_Данные(КонтекстИзменений);
	Возврат Объект[Ключ.ИмяТаблицы].НайтиПоИдентификатору(Ключ.ИдентификаторСтроки);
КонецФункции

Процедура СохранитьДанныеПродолжения(КонтекстИзменений, ДанныеКонтекста)
	ЗаполнитьКлючСтроки(КонтекстИзменений, ДанныеКонтекста.ОбработчикиСтроки);
	
	Если ДанныеКонтекста.ИзмененныеТаблицы <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ДанныеКонтекста.ИзмененныеТаблицы Цикл
			Результат = ЭлементСоответствия.Значение;
			ЗаполнитьКлючСтроки(КонтекстИзменений, Результат);
			ДанныеКонтекста.ИзмененныеТаблицы[ЭлементСоответствия.Ключ] = Результат;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из ДанныеКонтекста.Обработчики.ИзмененныеРеквизиты Цикл
		Если ТипЗнч(ЭлементСоответствия.Значение) = Тип("Соответствие") Тогда
			Результат = ЭлементСоответствия.Значение;
			ЗаполнитьКлючСтроки(КонтекстИзменений, Результат);
			ДанныеКонтекста.Обработчики.ИзмененныеРеквизиты[ЭлементСоответствия.Ключ] = Результат;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьКлючСтроки(КонтекстИзменений, ДанныеКонтекста.ПараметрыСтроки);
КонецПроцедуры

Процедура ЗаполнитьКлючСтроки(КонтекстИзменений, Соответствие)
	НовоеСоответствие = Новый Соответствие;
	Для Каждого ЭлементСоответствия Из Соответствие Цикл
		Если ТипЗнч(ЭлементСоответствия.Ключ) = Тип("Структура") Тогда
			КлючСтроки = Новый Массив;
			КлючСтроки.Добавить(ЭлементСоответствия.Ключ);
		Иначе
			КлючСтроки = ПолучитьКлючСтроки(КонтекстИзменений, ЭлементСоответствия.Ключ);
		КонецЕсли;
		
		НовоеСоответствие.Вставить(КлючСтроки, ЭлементСоответствия.Значение);
	КонецЦикла;
	Соответствие = НовоеСоответствие;
КонецПроцедуры

Функция ЭтоУправляемаяФормаНаКлиенте(КонтекстИзменений)
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	Результат = (ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма"));
	#Если Сервер Тогда
	Результат = Ложь;
	#КонецЕсли
	
	Возврат Результат;
КонецФункции

Функция ЭтоОбъектСсылочногоТипа(Значение)
	Результат = Ложь;
	#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	СтруктураЗначения = Новый Структура("ОбменДанными");
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, Значение);
	Если ТипЗнч(СтруктураЗначения.ОбменДанными) = Тип("ПараметрыОбменаДанными") Тогда
		Результат = Истина;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
КонецФункции

Функция ЭтоСсылка(Значение)
	Если ТипЗнч(Значение) <> Тип("УправляемаяФорма") Тогда
		СтруктураЗначения = Новый Структура("Ссылка");
		ЗаполнитьЗначенияСвойств(СтруктураЗначения, Значение);
		Возврат СтруктураЗначения.Ссылка = Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначениеРеквизита(Владелец, ИмяРеквизита)
	Результат = Владелец[ИмяРеквизита];
	#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	Если (ТипЗнч(Владелец) = Тип("СтрокаТаблицыЗначений")
		ИЛИ ТипЗнч(Владелец) = Тип("СтрокаДереваЗначений"))
		И (ТипЗнч(Результат) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(Результат) = Тип("ДеревоЗначений")) Тогда
		
		// обращение к коллекции внутри коллекции
		Если Результат.Колонки.Количество() = 0 Тогда
			ДобавленныеРеквизиты = ЗначениеИзСтрокиВнутр(Владелец.Владелец().Колонки[ИмяРеквизита].Заголовок);
			Для Каждого ЭлементСтруктуры Из ДобавленныеРеквизиты Цикл
				ПараметрыРеквизита = ЭлементСтруктуры.Значение;
				ТипЗначенияРеквизита = ЗначениеИзСтрокиВнутр(ПараметрыРеквизита.ТипЗначенияВнутр);
				Если ТипЗначенияРеквизита.СодержитТип(Тип("ТаблицаЗначений"))
					ИЛИ ТипЗначенияРеквизита.СодержитТип(Тип("ДеревоЗначений")) Тогда
						
					Заголовок = ЗначениеВСтрокуВнутр(ДобавленныеРеквизиты[ИмяРеквизита].ПодчиненныеЭлементы);
				Иначе
					Заголовок = "";
				КонецЕсли;
				
				Результат.Колонки.Добавить(ПараметрыРеквизита.Имя, ТипЗначенияРеквизита, Заголовок);
			КонецЦИкла;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
КонецФункции

Функция ПреобразоватьВФиксированноеЗначение(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого Элемент Из Значение Цикл
			Результат.Добавить(ПреобразоватьВФиксированноеЗначение(Элемент));
		КонецЦикла;
		
		Возврат Новый ФиксированныйМассив(Результат);
	
	ИначеЕсли ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Результат = Новый Соответствие;
		Для Каждого ЭлементСоответствия Из Значение Цикл
			Результат.Вставить(ЭлементСоответствия.Ключ, ПреобразоватьВФиксированноеЗначение(ЭлементСоответствия.Значение))
		КонецЦикла;
		
		Возврат Новый ФиксированноеСоответствие(Результат);

	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Для Каждого ЭлементСтруктуры Из Значение Цикл
			Результат.Вставить(ЭлементСтруктуры.Ключ, ПреобразоватьВФиксированноеЗначение(ЭлементСтруктуры.Значение))
		КонецЦикла;
		
		Возврат Новый ФиксированнаяСтруктура(Результат);
	
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

Функция СохранитьСостояниеКонтекста(ДанныеКонтекста)
	СтруктураРезультат = Новый Структура("НомерЭтапа,ЕстьИзменения");
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, ДанныеКонтекста);
	ДанныеКонтекста.УровеньВложенности = ДанныеКонтекста.УровеньВложенности + 1;
	
	Возврат СтруктураРезультат;
КонецФункции

Процедура ВосстановитьСостояниеКонтекста(СостояниеКонтекста, ДанныеКонтекста, Событие = Неопределено)
	Если Событие = "ПередВызовомСервера"
		ИЛИ Событие = Неопределено Тогда
		
		ДанныеКонтекста.УровеньВложенности = ДанныеКонтекста.УровеньВложенности - 1;
	КонецЕсли;
	
	Если Событие = "ПослеВызоваСервера"
		ИЛИ Событие = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтекста, СостояниеКонтекста);
		
		Если ДанныеКонтекста.УровеньВложенности = 0 Тогда
			ДанныеКонтекста.Обработчики = Неопределено;
			ДанныеКонтекста.ОбработчикиСтроки.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Если НЕ Клиент ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
Процедура ПрименитьДанныеПродолжения(КонтекстИзменений, ДанныеКонтекста)
	ЗаполнитьДанныеСтроки(КонтекстИзменений, ДанныеКонтекста.ОбработчикиСтроки);
	ЗаполнитьДанныеСтроки(КонтекстИзменений, ДанныеКонтекста.ПараметрыСтроки);

	Если ДанныеКонтекста.ИзмененныеТаблицы <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ДанныеКонтекста.ИзмененныеТаблицы Цикл
			Результат = ЭлементСоответствия.Значение;
			ЗаполнитьДанныеСтроки(КонтекстИзменений, Результат);
			ДанныеКонтекста.ИзмененныеТаблицы[ЭлементСоответствия.Ключ] = Результат;
		КонецЦикла;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из ДанныеКонтекста.Обработчики.ИзмененныеРеквизиты Цикл
		Если ТипЗнч(ЭлементСоответствия.Значение) = Тип("Соответствие") Тогда
			Результат = ЭлементСоответствия.Значение;
			ЗаполнитьДанныеСтроки(КонтекстИзменений, Результат);
			ДанныеКонтекста.Обработчики.ИзмененныеРеквизиты[ЭлементСоответствия.Ключ] = Результат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДанныеСтроки(КонтекстИзменений, Соответствие)
	НовоеСоответствие = Новый Соответствие;
	Для Каждого ЭлементСоответствия Из Соответствие Цикл
		Если ТипЗнч(ЭлементСоответствия.Ключ) = Тип("Структура") Тогда
			КлючСтроки = ПолучитьДанныеСтроки(КонтекстИзменений, ЭлементСоответствия.Ключ);
		Иначе
			КлючСтроки = ЭлементСоответствия.Ключ[0];
		КонецЕсли;
		
		НовоеСоответствие.Вставить(КлючСтроки, ЭлементСоответствия.Значение);
	КонецЦикла;
	Соответствие = НовоеСоответствие;
КонецПроцедуры

Процедура СоздатьРеквизиты(КонтекстИзменений, Родитель = Неопределено, Путь = "")
	ДанныеКонтекста = ДанныеКонтекста(КонтекстИзменений);
	ПараметрыМодели = ДанныеКонтекста.ПараметрыМодели;
	Если Родитель = Неопределено Тогда
		Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			СоздатьРеквизиты(КонтекстИзменений, ПараметрыМодели.ДобавленныеРеквизиты);
			Для Каждого ЭлементСоответствия Из ПараметрыМодели.ДобавленныеРеквизитыТаблицы Цикл
				СоздатьРеквизиты(КонтекстИзменений, ЭлементСоответствия.Значение, "Объект." + ЭлементСоответствия.Ключ);
			КонецЦикла;
		Иначе
			СоздатьРеквизиты(КонтекстИзменений, ПараметрыМодели.ДобавленныеРеквизиты, ДанныеКонтекста.Реквизиты);
			Для Каждого ЭлементСоответствия Из ПараметрыМодели.ДобавленныеРеквизитыТаблицы Цикл
				ТаблицаЗначений = Новый ТаблицаЗначений;
				ТаблицаЗначений.Колонки.Добавить("Модель_СтрокаТаблицы");
				ТаблицаЗначений.Индексы.Добавить("Модель_СтрокаТаблицы");
				
				ДанныеКонтекста.РеквизитыСтроки.Вставить(ЭлементСоответствия.Ключ, ТаблицаЗначений);
				СоздатьРеквизиты(КонтекстИзменений, ЭлементСоответствия.Значение, ТаблицаЗначений)
			КонецЦикла;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ДобавляемыеРеквизиты = Новый Массив;
	Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		Если НЕ ЗначениеЗаполнено(Путь) Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Модель_Параметры", Новый ОписаниеТипов()));
		КонецЕсли;
	КонецЕсли;

	Если ДобавляемыеРеквизиты.Количество() = 0
		И Родитель.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	СоответствиеРеквизиты = Новый Соответствие;
	Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		Для Каждого РеквизитФормы Из ДанныеКонтекста.ОбъектФорма.ПолучитьРеквизиты(Путь) Цикл
			СоответствиеРеквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы.ТипЗначения);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из Родитель Цикл
		ПараметрыРеквизита = ЭлементСтруктуры.Значение;
		ТипЗначенияРеквизита = ЗначениеИзСтрокиВнутр(ПараметрыРеквизита.ТипЗначенияВнутр);
		Если СоответствиеРеквизиты[ПараметрыРеквизита.Имя] = Неопределено Тогда
			Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПараметрыРеквизита.Имя, ТипЗначенияРеквизита, ПараметрыРеквизита.Путь));

			ИначеЕсли ТипЗнч(Путь) = Тип("ТаблицаЗначений")
				ИЛИ ТипЗнч(Путь) = Тип("ДеревоЗначений") Тогда

				Если ТипЗначенияРеквизита.СодержитТип(Тип("ТаблицаЗначений"))
					ИЛИ ТипЗначенияРеквизита.СодержитТип(Тип("ДеревоЗначений")) Тогда
				
					Заголовок = ЗначениеВСтрокуВнутр(ПараметрыРеквизита.ПодчиненныеРеквизиты);
				Иначе
					Заголовок = "";
				КонецЕсли;
				
				Путь.Колонки.Добавить(ПараметрыРеквизита.Имя, ТипЗначенияРеквизита, Заголовок);
			Иначе
				Путь.Вставить(ПараметрыРеквизита.Имя, ТипЗначенияРеквизита.ПривестиЗначение(Неопределено));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		ДанныеКонтекста.ОбъектФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из Родитель Цикл
		Если ТипЗнч(ДанныеКонтекста.ОбъектФорма) = Тип("УправляемаяФорма") Тогда
			СоздатьРеквизиты(КонтекстИзменений, ЭлементСтруктуры.Значение.ПодчиненныеРеквизиты, ?(ЗначениеЗаполнено(Путь), Путь + ".", "") + ЭлементСтруктуры.Ключ);
			
		ИначеЕсли ТипЗнч(Путь) <> Тип("ТаблицаЗначений")
			И ТипЗнч(Путь) <> Тип("ДеревоЗначений") Тогда
		
			СоздатьРеквизиты(КонтекстИзменений, ЭлементСтруктуры.Значение.ПодчиненныеРеквизиты, Путь[ЭлементСтруктуры.Ключ]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПараметрыМодели(ОбъектФорма) Экспорт
	СтруктураРезультат = Новый Структура("Опции,ИменаТаблиц,ДобавленныеРеквизиты,ДобавленныеРеквизитыТаблицы,ДобавленныеТаблицы,ЕстьРеквизитыВместе,ЕстьРеквизитыОтдельно,ИмяОбъекта"
		,Новый Структура, Новый Массив, Новый Структура, Новый Соответствие, Новый Соответствие, Ложь, Ложь, "");
	
	Если ТипЗнч(ОбъектФорма) = Тип("УправляемаяФорма") Тогда
		МассивИмяОбъекта = СтрРазделить(ОбъектФорма.ИмяФормы, ".");
		СтруктураРезультат.ИмяОбъекта = МассивИмяОбъекта[0] + "." + МассивИмяОбъекта[1];
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(СтруктураРезультат.ИмяОбъекта);
	Иначе
		МетаданныеОбъекта = ОбъектФорма.Метаданные();
		СтруктураРезультат.ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	КонецЕсли;

	Для Каждого МетаданныеТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		СтруктураРезультат.ИменаТаблиц.Добавить(МетаданныеТЧ.Имя);
	КонецЦикла;

	МетаданныеМодуля = Метаданные.ОбщиеМодули["Модель_" + СтрЗаменить(СтруктураРезультат.ИмяОбъекта, ".", "_") + "КлиентСервер"];
	Для Каждого Описание Из глМодель_ПолучитьКлючи(МетаданныеМодуля.Комментарий) Цикл
		СтруктураРезультат.Опции.Вставить(СокрЛП(Описание));
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

// Получение описания типов из строки
// Типы перечисляются типы через запятую, также как они передаются в конструктор объекта ОписаниеТипов
// Для примитивных типов поддерживается указание квалификаторов
//	Число(<длина>, <точность>, <имя значения перечисления ДопустимаяДлина>)
//	Строка(<длина>, <имя значения перечисления ДопустимаяДлина >)
//	Дата(<имя значения перечисления ЧастиДаты>)
//	
// Параметры:
// 	ТекстОписание - Строка
// Возвращаемое значение:
// 		- ОписаниеТипов
// 
Функция ПолучитьОписаниеТиповИзСтроки(ТекстОписание)
	МассивТипы = Новый Массив;
	КвалификаторыЧисла = Неопределено;
	КвалификаторыДаты = Неопределено;
	КвалификаторыСтроки = Неопределено;
	
	Если Найти(ТекстОписание, "(") > 0 Тогда
		Для Каждого Описание Из ПолучитьМассивОписаний(ТекстОписание) Цикл
			Поз = Найти(Описание, "(");
			Если Поз > 0 Тогда
				ИмяТипа = Лев(Описание, Поз - 1);
				МассивПараметры = СтрРазделить(Сред(Описание, Поз + 1, СтрДлина(Описание) - Поз - 1), ",");
				МассивОписаниеПараметров = Новый Массив;
				Если ИмяТипа = "Число" Тогда
					МассивОписаниеПараметров.Добавить("Число(%1)");
					МассивОписаниеПараметров.Добавить("Число(%1)");
					МассивОписаниеПараметров.Добавить("ДопустимыйЗнак[%1]");
					
					КвалификаторыЧисла = Вычислить("Новый КвалификаторыЧисла(" + ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров) + ")");
					
				ИначеЕсли ИмяТипа = "Строка" Тогда
					МассивОписаниеПараметров.Добавить("Число(%1)");
					МассивОписаниеПараметров.Добавить("ДопустимаяДлина[%1]");
					
					КвалификаторыСтроки = Вычислить("Новый КвалификаторыСтроки(" + ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров) + ")");
					
				ИначеЕсли ИмяТипа = "Дата" Тогда
					МассивОписаниеПараметров.Добавить("ЧастиДаты[%1]");
					
					КвалификаторыДаты = Вычислить("Новый КвалификаторыДаты(" + ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров) + ")");
				КонецЕсли;
			Иначе
				ИмяТипа = Описание;
			КонецЕсли;
			
			МассивТипы.Добавить(Тип(ИмяТипа));
		КонецЦикла;
		
		Возврат Новый ОписаниеТипов(МассивТипы, , , КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	Иначе
		Возврат Новый ОписаниеТипов(ТекстОписание);
	КонецЕсли;

КонецФункции

Функция ПолучитьТекстПараметров(МассивПараметры, МассивОписаниеПараметров)
	ТекстРезультат = "";
	Для Инд = 1 По МассивПараметры.Количество() Цикл
		Если НЕ ПустаяСтрока(МассивПараметры[Инд - 1]) Тогда
			ТекстРезультат = ТекстРезультат + "," + СтрЗаменить(МассивОписаниеПараметров[Инд - 1], "%1", "МассивПараметры[" + Число(Инд - 1) + "]");
		Иначе
			ТекстРезультат = ТекстРезультат + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сред(ТекстРезультат, 2);
КонецФункции

Функция ПолучитьМассивОписаний(ТекстОписание)
	МассивРезультат = Новый Массив;
	
	НачалоОписания = 1;
	СчетчикСкобок = 0;
	РежимСтроки = Ложь;
	Для Инд = 1 По СтрДлина(ТекстОписание) Цикл
		ТекущийСимвол = Сред(ТекстОписание, Инд, 1);
		Если ТекущийСимвол = ","
			И НЕ РежимСтроки
			И СчетчикСкобок = 0 Тогда
			
			Описание = СокрЛП(Сред(ТекстОписание, НачалоОписания, Инд - НачалоОписания));
			Если ЗначениеЗаполнено(Описание) Тогда
				МассивРезультат.Добавить(СокрЛП(Описание));
			КонецЕсли;
			
			НачалоОписания = Инд + 1;
			
		ИначеЕсли ТекущийСимвол = """" Тогда
			РежимСтроки = НЕ РежимСтроки;
			
		ИначеЕсли НЕ РежимСтроки
			И ТекущийСимвол = "(" Тогда
			
			СчетчикСкобок = СчетчикСкобок + 1;
			
		ИначеЕсли НЕ РежимСтроки
			И ТекущийСимвол = ")" Тогда
			
			СчетчикСкобок = СчетчикСкобок - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимСтроки Тогда
		ВызватьИсключение "Не найдена завершающая "" в " + ТекстОписание;
	ИначеЕсли СчетчикСкобок > 0 Тогда
		ВызватьИсключение "Не найдена завершающая ) в " + ТекстОписание;
	КонецЕсли;
	
	Описание = СокрЛП(Сред(ТекстОписание, НачалоОписания, Инд - НачалоОписания));
	Если ЗначениеЗаполнено(Описание) Тогда
		МассивРезультат.Добавить(СокрЛП(Описание));
	КонецЕсли;
	
	Возврат МассивРезультат;
КонецФункции
#КонецЕсли